{"version":3,"sources":["D2App/components/Layout/LayoutContainer.module.css","D2App/components/Layout/LayoutSidebar.module.css","D2App/components/Layout/LayoutContent.module.css","D2App/components/AppTitle/AppTitle.module.css","D2App/components/Charts/ChartHeader.module.css","D2App/components/Charts/ChartWrapper.module.css","D2App/constants/categories.js","D2App/constants/intervals.js","D2App/constants/aggregations.js","D2App/constants/chartTypes.js","D2App/constants/eventTypes.js","D2App/constants/pageSizes.js","D2App/constants/sortOrders.js","D2App/components/FilterFields/AggregationField.js","D2App/components/FilterFields/ChartTypeField.js","D2App/components/FilterFields/validators.js","D2App/components/FilterFields/StartDateField.js","D2App/components/FilterFields/EndDateField.js","D2App/components/FilterFields/DateRangeField.js","D2App/components/FilterFields/EventTypeField.js","D2App/components/FilterFields/IntervalField.js","D2App/components/FilterFields/PageSizeField.js","D2App/components/FilterFields/SortOrderField.js","D2App/components/Filters/TopFavoritesFilters.js","D2App/components/Filters/DataValuesFilters.js","D2App/components/Filters/UsersFilters.js","D2App/components/Filters/FavoritesSavedFilters.js","D2App/components/Filters/FavoriteViewsFilters.js","D2App/components/Filters/Filters.js","D2App/components/Layout/LayoutContainer.js","D2App/components/Layout/LayoutSidebar.js","D2App/components/Layout/LayoutContent.js","D2App/components/CategoryField/CategoryField.js","D2App/components/AppTitle/AppTitle.js","D2App/selectors/date.js","D2App/components/Tables/TableWrapper.js","D2App/components/Tables/DataValuesTable.js","D2App/components/Tables/UsersTable.js","D2App/components/Tables/FavoritesSavedTable.js","D2App/components/Tables/SumFavoriteViewsTable.js","D2App/components/Tables/AverageFavoriteViewsTable.js","D2App/components/Tables/TopFavoritesTable.js","D2App/components/Queries/TopFavoritesQuery.js","D2App/components/Queries/validators.js","D2App/components/Queries/DataStatisticsQuery.js","D2App/components/Visualization/TopFavoritesVisualization.js","D2App/components/Charts/ChartHeader.js","D2App/components/Charts/ChartWrapper.js","D2App/components/Charts/selectors.js","D2App/components/Charts/options.js","D2App/components/Charts/UsersChart.js","D2App/components/Charts/DataValuesChart.js","D2App/components/Charts/FavoritesSavedChart.js","D2App/components/Charts/SumAllFavoriteViewsChart.js","D2App/components/Charts/SumTotalFavoriteViewsChart.js","D2App/components/Charts/AverageAllFavoriteViewsChart.js","D2App/components/Charts/AverageTotalFavoriteViewsChart.js","D2App/components/Visualization/DataValuesVisualization.js","D2App/components/Visualization/UsersVisualization.js","D2App/components/Visualization/FavoritesSavedVisualization.js","D2App/components/Visualization/FavoriteViewsVisualization.js","D2App/components/Visualization/Visualization.js","D2App/components/App/createDefaultDates.js","D2App/components/App/App.js"],"names":["module","exports","DATA_VALUES","FAVORITES_SAVED","FAVORITE_VIEWS","TOP_FAVORITES","USERS","categories","value","label","i18n","t","subtitle","WEEK","MONTH","YEAR","intervals","SUM","aggregations","ALL","chartTypes","CHART_VIEW","eventTypes","pageSizes","sortOrders","AggregationField","aggregation","setAggregation","selected","onChange","map","key","ChartTypeField","chartType","setChartType","expectedFormat","validateDateRange","startDate","endDate","startMoment","moment","endMoment","isAfter","validateDate","date","isValid","StartDateField","setStartDate","startDateError","setStartDateError","type","error","validationText","EndDateField","setEndDate","endDateError","setEndDateError","DateRangeField","useState","rangeError","setRangeError","onRangeChange","EventTypeField","eventType","setEventType","IntervalField","interval","setReportInterval","PageSizeField","pageSize","setPageSize","SortOrderField","sortOrder","setSortOrder","TopFavoritesFilters","Fragment","DataValuesFilters","UsersFilters","FavoritesSavedFilters","FavoriteViewsFilters","Filters","category","title","LayoutContainer","children","className","styles","container","LayoutSidebar","sidebar","LayoutContent","content","CategoryField","setCategory","AppTitle","getIntervalDate","year","month","week","day","format","zeroIndexedMonth","TableWrapper","DataValuesTable","data","savedDataValues","intervalDate","UsersTable","activeUsers","users","FavoritesSavedTable","savedMaps","savedCharts","savedPivotTables","savedEventReports","savedEventCharts","savedDashboards","savedIndicators","SumFavoriteViewsTable","mapViews","chartViews","pivotTableViews","eventReportViews","eventChartViews","dashboardViews","dataSetReportViews","totalViews","AverageFavoriteViewsTable","averageMapViews","averageChartViews","averagePivotTableViews","averageEventReportViews","averageEventChartViews","averageDashboardViews","averageViews","TopFavoritesTable","position","name","views","id","created","timestamp","query","favorites","resource","params","fields","TopFavoritesQuery","loading","called","refetch","useDataQuery","lazy","variables","useEffect","message","MESSAGE","nsSeparator","fallback","dataStatistics","DataStatisticsQuery","isIntervalStale","setIsIntervalStale","onDone","onComplete","onError","hasStartDateError","hasEndDateError","hasRangeError","validateDates","TopFavoritesVisualization","ChartHeader","ChartWrapper","outerContainer","innerContainer","chartContainer","blue300","yellow700","yellow200","green400","red400","grey900","teal600","colors","COLOR_1","COLOR_2","COLOR_3","COLOR_4","COLOR_5","COLOR_6","COLOR_7","getTitles","selectedCategory","find","getLabels","options","animation","duration","legend","maintainAspectRatio","elements","line","tension","fill","backgroundColor","scales","yAxes","scaleLabel","display","labelString","UsersChart","labels","datasets","d","borderColor","getUsersDatasets","DataValuesChart","getDataValuesDatasets","FavoritesSavedChart","getFavoritesSavedDatasets","SumAllFavoriteViewsChart","getSumAllFavoriteViewsDatasets","SumTotalFavoriteViewsChart","getSumTotalFavoriteViewsDatasets","AverageAllFavoriteViewsChart","getAverageAllFavoriteViewsDatasets","AverageTotalFavoriteViewsChart","getAverageTotalFavoriteViewsDatasets","DataValuesVisualization","UsersVisualization","FavoritesSavedVisualization","sumFields","averageFields","FavoriteViewsVisualization","isAll","Visualization","createDefaultDates","now","Date","initialStartDate","subtract","initialEndDate","App","spacers"],"mappings":"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","file":"static/js/app.ad95afd0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LayoutContainer_container__2gt-1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"LayoutSidebar_sidebar__38x-X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"LayoutContent_content__3pEdj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"AppTitle_title__mjsfQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ChartHeader_title__ff7A2\",\"subtitle\":\"ChartHeader_subtitle__2JAVZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"ChartWrapper_outerContainer__2BU2T\",\"innerContainer\":\"ChartWrapper_innerContainer__5ZEsg\",\"chartContainer\":\"ChartWrapper_chartContainer__jt1gD\"};","import i18n from '@dhis2/d2-i18n';\nexport const DATA_VALUES = 'DATA_VALUES';\nexport const FAVORITES_SAVED = 'FAVORITES_SAVED';\nexport const FAVORITE_VIEWS = 'FAVORITE_VIEWS';\nexport const TOP_FAVORITES = 'TOP_FAVORITES';\nexport const USERS = 'USERS';\nconst categories = [{\n  value: FAVORITE_VIEWS,\n  label: i18n.t('Favorite views'),\n  subtitle: i18n.t('Number of times users looked at analysis favorites')\n}, {\n  value: FAVORITES_SAVED,\n  label: i18n.t('Favorites saved'),\n  subtitle: i18n.t('Number of analysis favorites created by users')\n}, {\n  value: USERS,\n  label: i18n.t('Users'),\n  subtitle: i18n.t('Number of users in the system')\n}, {\n  /**\n   * This doesn't need a subtitle because it doesn't render a graph (which\n   * is the component that needs the subtitle).\n   */\n  value: TOP_FAVORITES,\n  label: i18n.t('Top favorites')\n}, {\n  value: DATA_VALUES,\n  label: i18n.t('Data values'),\n  subtitle: i18n.t('Number of data values saved in the system')\n}];\nexport default categories;","import i18n from '@dhis2/d2-i18n';\nexport const DAY = 'DAY';\nexport const WEEK = 'WEEK';\nexport const MONTH = 'MONTH';\nexport const YEAR = 'YEAR';\nconst intervals = [{\n  value: DAY,\n  label: i18n.t('Day')\n}, {\n  value: WEEK,\n  label: i18n.t('Week')\n}, {\n  value: MONTH,\n  label: i18n.t('Month')\n}, {\n  value: YEAR,\n  label: i18n.t('Year')\n}];\nexport default intervals;","import i18n from '@dhis2/d2-i18n';\nexport const SUM = 'SUM';\nexport const AVERAGE = 'AVERAGE';\nconst aggregations = [{\n  value: SUM,\n  label: i18n.t('Sum')\n}, {\n  value: AVERAGE,\n  label: i18n.t('Average')\n}];\nexport default aggregations;","import i18n from '@dhis2/d2-i18n';\nexport const ALL = 'ALL';\nexport const TOTAL = 'TOTAL';\nconst chartTypes = [{\n  value: ALL,\n  label: i18n.t('All')\n}, {\n  value: TOTAL,\n  label: i18n.t('Total')\n}];\nexport default chartTypes;","import i18n from '@dhis2/d2-i18n';\nexport const CHART_VIEW = 'CHART_VIEW';\nexport const MAP_VIEW = 'MAP_VIEW';\nexport const REPORT_TABLE_VIEW = 'REPORT_TABLE_VIEW';\nexport const EVENT_REPORT_VIEW = 'EVENT_REPORT_VIEW';\nexport const EVENT_CHART_VIEW = 'EVENT_CHART_VIEW';\nexport const DASHBOARD_VIEW = 'DASHBOARD_VIEW';\nexport const DATA_SET_REPORT_VIEW = 'DATA_SET_REPORT_VIEW';\nconst eventTypes = [{\n  value: CHART_VIEW,\n  label: i18n.t('Chart')\n}, {\n  value: MAP_VIEW,\n  label: i18n.t('Map')\n}, {\n  value: REPORT_TABLE_VIEW,\n  label: i18n.t('Report table')\n}, {\n  value: EVENT_REPORT_VIEW,\n  label: i18n.t('Event report')\n}, {\n  value: EVENT_CHART_VIEW,\n  label: i18n.t('Event chart')\n}, {\n  value: DASHBOARD_VIEW,\n  label: i18n.t('Dashboard')\n}, {\n  value: DATA_SET_REPORT_VIEW,\n  label: i18n.t('Data set report')\n}];\nexport default eventTypes;","export const PS_5 = '5';\nexport const PS_10 = '10';\nexport const PS_15 = '15';\nexport const PS_20 = '20';\nexport const PS_25 = '25';\nconst pageSizes = [{\n  value: PS_5,\n  label: '5'\n}, {\n  value: PS_10,\n  label: '10'\n}, {\n  value: PS_15,\n  label: '15'\n}, {\n  value: PS_20,\n  label: '20'\n}, {\n  value: PS_25,\n  label: '25'\n}];\nexport default pageSizes;","import i18n from '@dhis2/d2-i18n';\nexport const ASC = 'ASC';\nexport const DESC = 'DESC';\nconst sortOrders = [{\n  value: ASC,\n  label: i18n.t('Ascending')\n}, {\n  value: DESC,\n  label: i18n.t('Descending')\n}];\nexport default sortOrders;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport aggregations from '../../constants/aggregations.js';\n\nconst AggregationField = ({\n  aggregation,\n  setAggregation\n}) => <SingleSelectField selected={aggregation} onChange={({\n  selected\n}) => {\n  setAggregation(selected);\n}} label={i18n.t('Aggregation Level')}>\n        {aggregations.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nAggregationField.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  setAggregation: PropTypes.func.isRequired\n};\nexport default AggregationField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport chartTypes from '../../constants/chartTypes.js';\n\nconst ChartTypeField = ({\n  chartType,\n  setChartType\n}) => <SingleSelectField selected={chartType} onChange={({\n  selected\n}) => {\n  setChartType(selected);\n}} label={i18n.t('Chart Type')}>\n        {chartTypes.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nChartTypeField.propTypes = {\n  chartType: PropTypes.string.isRequired,\n  setChartType: PropTypes.func.isRequired\n};\nexport default ChartTypeField;","import moment from 'moment';\nimport i18n from '@dhis2/d2-i18n'; // The expected date format\n\nconst expectedFormat = 'YYYY-MM-DD'; // Validates two dates compared to eachother\n\nexport const validateDateRange = (startDate, endDate) => {\n  const startMoment = moment(startDate, expectedFormat);\n  const endMoment = moment(endDate, expectedFormat);\n\n  if (startMoment.isAfter(endMoment)) {\n    return i18n.t('Start date should be before end date');\n  }\n\n  return '';\n}; // Validates a single date\n\nexport const validateDate = date => {\n  if (!date) {\n    return i18n.t('Please fill in a date');\n  } // The 'true' flag ensures strict validation of the expected format\n\n\n  const dateMoment = moment(date, expectedFormat, true);\n\n  if (!dateMoment.isValid()) {\n    return i18n.t('Please use the format yyyy-mm-dd');\n  }\n\n  return '';\n};","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { InputField } from '@dhis2/ui';\nimport { validateDate } from './validators.js';\n\nconst StartDateField = ({\n  startDate,\n  setStartDate,\n  startDateError,\n  setStartDateError\n}) => {\n  const onChange = ({\n    value\n  }) => {\n    setStartDateError(validateDate(value));\n    setStartDate(value);\n  };\n\n  return <InputField label={i18n.t('Start Date')} type=\"date\" value={startDate} error={!!startDateError} validationText={startDateError} onChange={onChange} />;\n};\n\nStartDateField.propTypes = {\n  setStartDate: PropTypes.func.isRequired,\n  setStartDateError: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired,\n  startDateError: PropTypes.string.isRequired\n};\nexport default StartDateField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { InputField } from '@dhis2/ui';\nimport { validateDate } from './validators.js';\n\nconst EndDateField = ({\n  endDate,\n  setEndDate,\n  endDateError,\n  setEndDateError\n}) => {\n  const onChange = ({\n    value\n  }) => {\n    setEndDateError(validateDate(value));\n    setEndDate(value);\n  };\n\n  return <InputField label={i18n.t('End Date')} type=\"date\" value={endDate} error={!!endDateError} validationText={endDateError} onChange={onChange} />;\n};\n\nEndDateField.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  endDateError: PropTypes.string.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setEndDateError: PropTypes.func.isRequired\n};\nexport default EndDateField;","import React, { useState } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { validateDateRange } from './validators.js';\nimport StartDateField from './StartDateField.js';\nimport EndDateField from './EndDateField.js';\n\nconst DateRangeField = ({\n  startDate,\n  setStartDate,\n  endDate,\n  setEndDate\n}) => {\n  const [startDateError, setStartDateError] = useState('');\n  const [endDateError, setEndDateError] = useState('');\n  const [rangeError, setRangeError] = useState('');\n\n  const onRangeChange = (startDate, endDate) => {\n    setRangeError(validateDateRange(startDate, endDate));\n  };\n\n  const onStartDateChange = value => {\n    onRangeChange(value, endDate);\n    setStartDate(value);\n  };\n\n  const onEndDateChange = value => {\n    onRangeChange(startDate, value);\n    setEndDate(value);\n  };\n\n  return <div>\n            <StartDateField startDate={startDate} setStartDate={onStartDateChange} startDateError={startDateError || rangeError} setStartDateError={setStartDateError} />\n            <EndDateField endDate={endDate} setEndDate={onEndDateChange} endDateError={endDateError || rangeError} setEndDateError={setEndDateError} />\n        </div>;\n};\n\nDateRangeField.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setStartDate: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default DateRangeField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport eventTypes from '../../constants/eventTypes.js';\n\nconst EventTypeField = ({\n  eventType,\n  setEventType\n}) => <SingleSelectField selected={eventType} onChange={({\n  selected\n}) => {\n  setEventType(selected);\n}} label={i18n.t('Event Type')}>\n        {eventTypes.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nEventTypeField.propTypes = {\n  eventType: PropTypes.string.isRequired,\n  setEventType: PropTypes.func.isRequired\n};\nexport default EventTypeField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport intervals from '../../constants/intervals.js';\n\nconst IntervalField = ({\n  interval,\n  setReportInterval\n}) => <SingleSelectField selected={interval} onChange={({\n  selected\n}) => {\n  setReportInterval(selected);\n}} label={i18n.t('Interval')}>\n        {intervals.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nIntervalField.propTypes = {\n  interval: PropTypes.string.isRequired,\n  setReportInterval: PropTypes.func.isRequired\n};\nexport default IntervalField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport pageSizes from '../../constants/pageSizes.js';\n\nconst PageSizeField = ({\n  pageSize,\n  setPageSize\n}) => <SingleSelectField selected={pageSize} onChange={({\n  selected\n}) => {\n  setPageSize(selected);\n}} label={i18n.t('Page Size')}>\n        {pageSizes.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nPageSizeField.propTypes = {\n  pageSize: PropTypes.string.isRequired,\n  setPageSize: PropTypes.func.isRequired\n};\nexport default PageSizeField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport sortOrders from '../../constants/sortOrders.js';\n\nconst SortOrderField = ({\n  sortOrder,\n  setSortOrder\n}) => <SingleSelectField selected={sortOrder} onChange={({\n  selected\n}) => {\n  setSortOrder(selected);\n}} label={i18n.t('Sort Order')}>\n        {sortOrders.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nSortOrderField.propTypes = {\n  setSortOrder: PropTypes.func.isRequired,\n  sortOrder: PropTypes.string.isRequired\n};\nexport default SortOrderField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { EventTypeField, PageSizeField, SortOrderField } from '../FilterFields/index.js';\n\nconst TopFavoritesFilters = ({\n  eventType,\n  pageSize,\n  setEventType,\n  setPageSize,\n  setSortOrder,\n  sortOrder\n}) => <React.Fragment>\n        <EventTypeField eventType={eventType} setEventType={setEventType} />\n        <PageSizeField pageSize={pageSize} setPageSize={setPageSize} />\n        <SortOrderField sortOrder={sortOrder} setSortOrder={setSortOrder} />\n    </React.Fragment>;\n\nTopFavoritesFilters.propTypes = {\n  eventType: PropTypes.string.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  setEventType: PropTypes.func.isRequired,\n  setPageSize: PropTypes.func.isRequired,\n  setSortOrder: PropTypes.func.isRequired,\n  sortOrder: PropTypes.string.isRequired\n};\nexport default TopFavoritesFilters;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { DateRangeField, IntervalField } from '../FilterFields/index.js';\n\nconst DataValuesFilters = ({\n  endDate,\n  interval,\n  setEndDate,\n  setReportInterval,\n  setStartDate,\n  startDate\n}) => <React.Fragment>\n        <DateRangeField startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} />\n        <IntervalField interval={interval} setReportInterval={setReportInterval} />\n    </React.Fragment>;\n\nDataValuesFilters.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setReportInterval: PropTypes.func.isRequired,\n  setStartDate: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default DataValuesFilters;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { DateRangeField, IntervalField } from '../FilterFields/index.js';\n\nconst UsersFilters = ({\n  endDate,\n  interval,\n  setEndDate,\n  setReportInterval,\n  setStartDate,\n  startDate\n}) => <React.Fragment>\n        <DateRangeField startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} />\n        <IntervalField interval={interval} setReportInterval={setReportInterval} />\n    </React.Fragment>;\n\nUsersFilters.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setReportInterval: PropTypes.func.isRequired,\n  setStartDate: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default UsersFilters;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { DateRangeField, IntervalField } from '../FilterFields/index.js';\n\nconst FavoritesSavedFilters = ({\n  endDate,\n  interval,\n  setEndDate,\n  setReportInterval,\n  setStartDate,\n  startDate\n}) => <React.Fragment>\n        <DateRangeField startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} />\n        <IntervalField interval={interval} setReportInterval={setReportInterval} />\n    </React.Fragment>;\n\nFavoritesSavedFilters.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setReportInterval: PropTypes.func.isRequired,\n  setStartDate: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default FavoritesSavedFilters;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { DateRangeField, IntervalField, AggregationField, ChartTypeField } from '../FilterFields/index.js';\n\nconst FavoriteViewsFilters = ({\n  aggregation,\n  chartType,\n  endDate,\n  interval,\n  setAggregation,\n  setChartType,\n  setEndDate,\n  setReportInterval,\n  setStartDate,\n  startDate\n}) => <React.Fragment>\n        <DateRangeField startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} />\n        <IntervalField interval={interval} setReportInterval={setReportInterval} />\n        <AggregationField aggregation={aggregation} setAggregation={setAggregation} />\n        <ChartTypeField chartType={chartType} setChartType={setChartType} />\n    </React.Fragment>;\n\nFavoriteViewsFilters.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  chartType: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  setAggregation: PropTypes.func.isRequired,\n  setChartType: PropTypes.func.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setReportInterval: PropTypes.func.isRequired,\n  setStartDate: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default FavoriteViewsFilters;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { NoticeBox } from '@dhis2/ui';\nimport { TOP_FAVORITES, DATA_VALUES, USERS, FAVORITES_SAVED, FAVORITE_VIEWS } from '../../constants/categories.js';\nimport TopFavoritesFilters from './TopFavoritesFilters.js';\nimport DataValuesFilters from './DataValuesFilters.js';\nimport UsersFilters from './UsersFilters.js';\nimport FavoritesSavedFilters from './FavoritesSavedFilters.js';\nimport FavoriteViewsFilters from './FavoriteViewsFilters.js';\n\nconst Filters = ({\n  aggregation,\n  category,\n  chartType,\n  endDate,\n  eventType,\n  interval,\n  pageSize,\n  setAggregation,\n  setChartType,\n  setEndDate,\n  setEventType,\n  setReportInterval,\n  setPageSize,\n  setSortOrder,\n  setStartDate,\n  sortOrder,\n  startDate\n}) => {\n  switch (category) {\n    case TOP_FAVORITES:\n      return <TopFavoritesFilters eventType={eventType} setEventType={setEventType} pageSize={pageSize} setPageSize={setPageSize} sortOrder={sortOrder} setSortOrder={setSortOrder} />;\n\n    case FAVORITE_VIEWS:\n      return <FavoriteViewsFilters startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} interval={interval} setReportInterval={setReportInterval} aggregation={aggregation} setAggregation={setAggregation} chartType={chartType} setChartType={setChartType} />;\n\n    case DATA_VALUES:\n      return <DataValuesFilters startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} interval={interval} setReportInterval={setReportInterval} />;\n\n    case USERS:\n      return <UsersFilters startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} interval={interval} setReportInterval={setReportInterval} />;\n\n    case FAVORITES_SAVED:\n      return <FavoritesSavedFilters startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} interval={interval} setReportInterval={setReportInterval} />;\n\n    default:\n      return <NoticeBox error title={i18n.t('Unrecognized category')}>\n                    {i18n.t('The chosen category was not recognized.')}\n                </NoticeBox>;\n  }\n};\n\nFilters.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  chartType: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  eventType: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  setAggregation: PropTypes.func.isRequired,\n  setChartType: PropTypes.func.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setEventType: PropTypes.func.isRequired,\n  setPageSize: PropTypes.func.isRequired,\n  setReportInterval: PropTypes.func.isRequired,\n  setSortOrder: PropTypes.func.isRequired,\n  setStartDate: PropTypes.func.isRequired,\n  sortOrder: PropTypes.string.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default Filters;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport styles from './LayoutContainer.module.css';\n\nconst LayoutContainer = ({\n  children\n}) => <main className={styles.container}>{children}</main>;\n\nLayoutContainer.propTypes = {\n  children: PropTypes.node\n};\nexport default LayoutContainer;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport styles from './LayoutSidebar.module.css';\n\nconst LayoutSidebar = ({\n  children\n}) => <aside className={styles.sidebar}>{children}</aside>;\n\nLayoutSidebar.propTypes = {\n  children: PropTypes.node\n};\nexport default LayoutSidebar;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport styles from './LayoutContent.module.css';\n\nconst LayoutContent = ({\n  children\n}) => <section className={styles.content}>{children}</section>;\n\nLayoutContent.propTypes = {\n  children: PropTypes.node\n};\nexport default LayoutContent;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport categories from '../../constants/categories.js';\n\nconst CategoryField = ({\n  category,\n  setCategory\n}) => <SingleSelectField selected={category} onChange={({\n  selected\n}) => {\n  setCategory(selected);\n}} label={i18n.t('Category')}>\n        {categories.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nCategoryField.propTypes = {\n  category: PropTypes.string.isRequired,\n  setCategory: PropTypes.func.isRequired\n};\nexport default CategoryField;","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport styles from './AppTitle.module.css';\n\nconst AppTitle = () => <h1 className={styles.title}>{i18n.t('Usage Analytics')}</h1>;\n\nexport default AppTitle;","import i18n from '@dhis2/d2-i18n';\nimport moment from 'moment';\nimport { YEAR, MONTH, WEEK, DAY } from '../constants/intervals.js';\n/**\n * This selector receives 1-indexed months. But moment expects 0-indexed months,\n * so we subtract 1 whenever a month is provided to moment\n */\n\nexport const getIntervalDate = ({\n  year,\n  month,\n  week,\n  day\n}, interval) => {\n  switch (interval) {\n    case YEAR:\n      {\n        return moment({\n          year\n        }).format('YYYY');\n      }\n\n    case MONTH:\n      {\n        const zeroIndexedMonth = month - 1;\n        const format = 'MMM YYYY';\n        return moment({\n          year,\n          month: zeroIndexedMonth\n        }).format(format);\n      }\n\n    case WEEK:\n      {\n        const format = `[${i18n.t('Week')}] [${week}] / YYYY`;\n        return moment({\n          year\n        }).format(format);\n      }\n\n    case DAY:\n      {\n        const zeroIndexedMonth = month - 1;\n        const format = 'MMM D, YYYY';\n        return moment({\n          year,\n          month: zeroIndexedMonth,\n          day\n        }).format(format);\n      }\n  }\n};","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Card } from '@dhis2/ui';\n/**\n * The div wrapping the Card is used to constrain the 100% height of the Card.\n */\n\nconst TableWrapper = ({\n  children\n}) => <div>\n        <Card>{children}</Card>\n    </div>;\n\nTableWrapper.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default TableWrapper;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst DataValuesTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Data Values')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        savedDataValues\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                            <TableCell>{intervalDate}</TableCell>\n                            <TableCell>{savedDataValues}</TableCell>\n                        </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nDataValuesTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    savedDataValues: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default DataValuesTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst UsersTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Active Users')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Total Users')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        activeUsers,\n        users\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                            <TableCell>{intervalDate}</TableCell>\n                            <TableCell>{activeUsers}</TableCell>\n                            <TableCell>{users}</TableCell>\n                        </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nUsersTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    activeUsers: PropTypes.number.isRequired,\n    users: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default UsersTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst FavoritesSavedTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Maps')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Charts')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Pivot Tables')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Event Reports')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Event Charts')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Dashboards')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Indicators')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        savedMaps,\n        savedCharts,\n        savedPivotTables,\n        savedEventReports,\n        savedEventCharts,\n        savedDashboards,\n        savedIndicators\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                                <TableCell>{intervalDate}</TableCell>\n                                <TableCell>{savedMaps}</TableCell>\n                                <TableCell>{savedCharts}</TableCell>\n                                <TableCell>{savedPivotTables}</TableCell>\n                                <TableCell>{savedEventReports}</TableCell>\n                                <TableCell>{savedEventCharts}</TableCell>\n                                <TableCell>{savedDashboards}</TableCell>\n                                <TableCell>{savedIndicators}</TableCell>\n                            </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nFavoritesSavedTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    savedCharts: PropTypes.number.isRequired,\n    savedDashboards: PropTypes.number.isRequired,\n    savedEventCharts: PropTypes.number.isRequired,\n    savedEventReports: PropTypes.number.isRequired,\n    savedIndicators: PropTypes.number.isRequired,\n    savedMaps: PropTypes.number.isRequired,\n    savedPivotTables: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default FavoritesSavedTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst SumFavoriteViewsTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Map')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Chart')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Pivot Table')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Event Report')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Event Chart')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Dashboard')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Data Set Report')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Total')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        mapViews,\n        chartViews,\n        pivotTableViews,\n        eventReportViews,\n        eventChartViews,\n        dashboardViews,\n        dataSetReportViews,\n        totalViews\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                                <TableCell>{intervalDate}</TableCell>\n                                <TableCell>{mapViews}</TableCell>\n                                <TableCell>{chartViews}</TableCell>\n                                <TableCell>{pivotTableViews}</TableCell>\n                                <TableCell>{eventReportViews}</TableCell>\n                                <TableCell>{eventChartViews}</TableCell>\n                                <TableCell>{dashboardViews}</TableCell>\n                                <TableCell>{dataSetReportViews}</TableCell>\n                                <TableCell>{totalViews}</TableCell>\n                            </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nSumFavoriteViewsTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    chartViews: PropTypes.number.isRequired,\n    dashboardViews: PropTypes.number.isRequired,\n    dataSetReportViews: PropTypes.number.isRequired,\n    eventChartViews: PropTypes.number.isRequired,\n    eventReportViews: PropTypes.number.isRequired,\n    mapViews: PropTypes.number.isRequired,\n    pivotTableViews: PropTypes.number.isRequired,\n    totalViews: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default SumFavoriteViewsTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst AverageFavoriteViewsTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Average Map')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Average Chart')}</TableCellHead>\n                    <TableCellHead>\n                        {i18n.t('Average Pivot Table')}\n                    </TableCellHead>\n                    <TableCellHead>\n                        {i18n.t('Average Event Report')}\n                    </TableCellHead>\n                    <TableCellHead>\n                        {i18n.t('Average Event Chart')}\n                    </TableCellHead>\n                    <TableCellHead>{i18n.t('Average Dashboard')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Average')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        averageMapViews,\n        averageChartViews,\n        averagePivotTableViews,\n        averageEventReportViews,\n        averageEventChartViews,\n        averageDashboardViews,\n        averageViews\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                                <TableCell>{intervalDate}</TableCell>\n                                <TableCell>{averageMapViews}</TableCell>\n                                <TableCell>{averageChartViews}</TableCell>\n                                <TableCell>{averagePivotTableViews}</TableCell>\n                                <TableCell>{averageEventReportViews}</TableCell>\n                                <TableCell>{averageEventChartViews}</TableCell>\n                                <TableCell>{averageDashboardViews}</TableCell>\n                                <TableCell>{averageViews}</TableCell>\n                            </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nAverageFavoriteViewsTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    averageChartViews: PropTypes.number.isRequired,\n    averageDashboardViews: PropTypes.number.isRequired,\n    averageEventChartViews: PropTypes.number.isRequired,\n    averageEventReportViews: PropTypes.number.isRequired,\n    averageMapViews: PropTypes.number.isRequired,\n    averagePivotTableViews: PropTypes.number.isRequired,\n    averageViews: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default AverageFavoriteViewsTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport moment from 'moment';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport TableWrapper from './TableWrapper.js';\n\nconst TopFavoritesTable = ({\n  data\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Position')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Name')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Views')}</TableCellHead>\n                    <TableCellHead>{i18n.t('ID')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Created')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        position,\n        name,\n        views,\n        id,\n        created\n      }) => {\n        const timestamp = moment(created).format('MMM D, YYYY');\n        return <TableRow key={id}>\n                            <TableCell>{position}</TableCell>\n                            <TableCell>{name}</TableCell>\n                            <TableCell>{views}</TableCell>\n                            <TableCell>{id}</TableCell>\n                            <TableCell>{timestamp}</TableCell>\n                        </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nTopFavoritesTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    created: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    position: PropTypes.number.isRequired,\n    views: PropTypes.number.isRequired\n  })).isRequired\n};\nexport default TopFavoritesTable;","import React, { useEffect } from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from '@dhis2/prop-types';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { CircularLoader, ComponentCover, CenteredContent, NoticeBox } from '@dhis2/ui';\nconst query = {\n  favorites: {\n    resource: 'dataStatistics/favorites',\n    params: ({\n      eventType,\n      pageSize,\n      sortOrder,\n      fields\n    }) => ({\n      eventType,\n      pageSize,\n      sortOrder,\n      fields\n    })\n  }\n};\n\nconst TopFavoritesQuery = ({\n  eventType,\n  pageSize,\n  sortOrder,\n  fields,\n  children\n}) => {\n  const {\n    loading,\n    error,\n    data,\n    called,\n    refetch\n  } = useDataQuery(query, {\n    lazy: true,\n    variables: {\n      eventType,\n      pageSize,\n      sortOrder,\n      fields\n    }\n  });\n  useEffect(() => {\n    refetch({\n      eventType,\n      pageSize,\n      sortOrder,\n      fields\n    });\n  }, [eventType, pageSize, sortOrder, fields]);\n\n  if (!called || loading) {\n    return <ComponentCover>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </ComponentCover>;\n  }\n\n  if (error) {\n    const title = i18n.t('Error whilst fetching data');\n    const message = i18n.t('The error message was: \"{{ MESSAGE }}\".', {\n      MESSAGE: error.message,\n      nsSeparator: '>'\n    });\n    const fallback = i18n.t('There was no error message included with the error.');\n    return <NoticeBox error title={title}>\n                {error.message ? message : fallback}\n            </NoticeBox>;\n  }\n\n  return children(data.favorites);\n};\n\nTopFavoritesQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  eventType: PropTypes.string.isRequired,\n  fields: PropTypes.array.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  sortOrder: PropTypes.string.isRequired\n};\nexport default TopFavoritesQuery;","import { validateDate, validateDateRange } from '../FilterFields/index.js';\n/**\n * This is used to check whether the dates are valid, so that we can fetch\n * new data. We're reusing the validators from the FilterFields.\n */\n\nexport const validateDates = (startDate, endDate) => {\n  const hasStartDateError = !!validateDate(startDate);\n  const hasEndDateError = !!validateDate(endDate);\n  const hasRangeError = !!validateDateRange(startDate, endDate);\n  const hasErrors = hasStartDateError || hasEndDateError || hasRangeError; // Return `true` if dates are valid, `false` if they are invalid\n\n  return !hasErrors;\n};","import React, { useEffect } from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from '@dhis2/prop-types';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { CircularLoader, ComponentCover, CenteredContent, NoticeBox } from '@dhis2/ui';\nimport { validateDates } from './validators.js';\nconst query = {\n  dataStatistics: {\n    resource: 'dataStatistics',\n    params: ({\n      startDate,\n      endDate,\n      interval,\n      fields\n    }) => ({\n      startDate,\n      endDate,\n      interval,\n      fields\n    })\n  }\n};\n\nconst DataStatisticsQuery = ({\n  children,\n  endDate,\n  fields,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => {\n  const onDone = () => setIsIntervalStale(false);\n\n  const {\n    loading,\n    error,\n    data,\n    called,\n    refetch\n  } = useDataQuery(query, {\n    lazy: true,\n    variables: {\n      startDate,\n      endDate,\n      interval,\n      fields\n    },\n    onComplete: onDone,\n    onError: onDone\n  });\n  useEffect(() => {\n    const datesAreValid = validateDates(startDate, endDate);\n\n    if (datesAreValid) {\n      refetch({\n        startDate,\n        endDate,\n        interval,\n        fields\n      });\n    }\n  }, [startDate, endDate, interval, fields]);\n\n  if (!called || loading || isIntervalStale) {\n    return <ComponentCover>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </ComponentCover>;\n  }\n\n  if (error) {\n    const title = i18n.t('Error whilst fetching data');\n    const message = i18n.t('The error message was: \"{{ MESSAGE }}\".', {\n      MESSAGE: error.message,\n      nsSeparator: '>'\n    });\n    const fallback = i18n.t('There was no error message included with the error.');\n    return <NoticeBox error title={title}>\n                {error.message ? message : fallback}\n            </NoticeBox>;\n  }\n\n  return children(data.dataStatistics);\n};\n\nDataStatisticsQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  endDate: PropTypes.string.isRequired,\n  fields: PropTypes.array.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default DataStatisticsQuery;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { TopFavoritesTable } from '../Tables/index.js';\nimport { TopFavoritesQuery } from '../Queries/index.js';\nconst fields = ['position', 'name', 'views', 'id', 'created'];\n\nconst TopFavoritesVisualization = ({\n  eventType,\n  pageSize,\n  sortOrder\n}) => <TopFavoritesQuery eventType={eventType} fields={fields} pageSize={pageSize} sortOrder={sortOrder}>\n        {data => <TopFavoritesTable data={data} />}\n    </TopFavoritesQuery>;\n\nTopFavoritesVisualization.propTypes = {\n  eventType: PropTypes.string.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  sortOrder: PropTypes.string.isRequired\n};\nexport default TopFavoritesVisualization;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport styles from './ChartHeader.module.css';\n\nconst ChartHeader = ({\n  title,\n  subtitle\n}) => <header>\n        <h4 className={styles.title}>{title}</h4>\n        <h6 className={styles.subtitle}>{subtitle}</h6>\n    </header>;\n\nChartHeader.propTypes = {\n  subtitle: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n};\nexport default ChartHeader;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Card } from '@dhis2/ui';\nimport ChartHeader from './ChartHeader.js';\nimport styles from './ChartWrapper.module.css';\n/**\n * This wrapper expects a react-chartjs-2 <Line> component as child.\n */\n\nconst ChartWrapper = ({\n  children,\n  title,\n  subtitle\n}) => <div className={styles.outerContainer}>\n        <Card>\n            <div className={styles.innerContainer}>\n                <ChartHeader title={title} subtitle={subtitle} />\n                <div className={styles.chartContainer}>{children}</div>\n            </div>\n        </Card>\n    </div>;\n\nChartWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n};\nexport default ChartWrapper;","import i18n from '@dhis2/d2-i18n';\nimport { colors } from '@dhis2/ui-constants';\nimport categories from '../../constants/categories.js';\nimport { getIntervalDate } from '../../selectors/date.js';\nconst {\n  blue300,\n  yellow700,\n  yellow200,\n  green400,\n  red400,\n  grey900,\n  teal600\n} = colors;\n/**\n * The colors for the linegraphs. We're using individual constants\n * so eslint will warn us if we use a constant that doesn't exist.\n */\n\nexport const COLOR_1 = blue300;\nexport const COLOR_2 = yellow700;\nexport const COLOR_3 = yellow200;\nexport const COLOR_4 = green400;\nexport const COLOR_5 = red400;\nexport const COLOR_6 = grey900;\nexport const COLOR_7 = teal600;\nexport const getTitles = selected => {\n  const selectedCategory = categories.find(category => category.value === selected);\n  return {\n    title: selectedCategory.label,\n    subtitle: selectedCategory.subtitle\n  };\n};\nexport const getLabels = (data, interval) => data.map(({\n  year,\n  month,\n  week,\n  day\n}) => getIntervalDate({\n  year,\n  month,\n  week,\n  day\n}, interval));\nexport const getDataValuesDatasets = data => [{\n  label: i18n.t('Data Values'),\n  data: data.map(d => d.savedDataValues),\n  borderColor: COLOR_1\n}];\nexport const getUsersDatasets = data => [{\n  label: i18n.t('Active Users'),\n  data: data.map(d => d.activeUsers),\n  borderColor: COLOR_1\n}, {\n  label: i18n.t('Total Users'),\n  data: data.map(d => d.users),\n  borderColor: COLOR_2\n}];\nexport const getFavoritesSavedDatasets = data => [{\n  label: i18n.t('Maps'),\n  data: data.map(d => d.savedMaps),\n  borderColor: COLOR_1\n}, {\n  label: i18n.t('Charts'),\n  data: data.map(d => d.savedCharts),\n  borderColor: COLOR_2\n}, {\n  label: i18n.t('Pivot Tables'),\n  data: data.map(d => d.savedPivotTables),\n  borderColor: COLOR_3\n}, {\n  label: i18n.t('Event Reports'),\n  data: data.map(d => d.savedEventReports),\n  borderColor: COLOR_4\n}, {\n  label: i18n.t('Event Charts'),\n  data: data.map(d => d.savedEventCharts),\n  borderColor: COLOR_5\n}, {\n  label: i18n.t('Dashboards'),\n  data: data.map(d => d.savedDashboards),\n  borderColor: COLOR_6\n}, {\n  label: i18n.t('Indicators'),\n  data: data.map(d => d.savedIndicators),\n  borderColor: COLOR_7\n}];\nexport const getSumAllFavoriteViewsDatasets = data => [{\n  label: i18n.t('Map'),\n  data: data.map(d => d.mapViews),\n  borderColor: COLOR_1\n}, {\n  label: i18n.t('Chart'),\n  data: data.map(d => d.chartViews),\n  borderColor: COLOR_2\n}, {\n  label: i18n.t('Pivot Table'),\n  data: data.map(d => d.pivotTableViews),\n  borderColor: COLOR_3\n}, {\n  label: i18n.t('Event Report'),\n  data: data.map(d => d.eventReportViews),\n  borderColor: COLOR_4\n}, {\n  label: i18n.t('Event Chart'),\n  data: data.map(d => d.eventChartViews),\n  borderColor: COLOR_5\n}, {\n  label: i18n.t('Dashboard'),\n  data: data.map(d => d.dashboardViews),\n  borderColor: COLOR_6\n}, {\n  label: i18n.t('Data Set Report'),\n  data: data.map(d => d.dataSetReportViews),\n  borderColor: COLOR_7\n}];\nexport const getSumTotalFavoriteViewsDatasets = data => [{\n  label: i18n.t('Total'),\n  data: data.map(d => d.totalViews),\n  borderColor: COLOR_1\n}];\nexport const getAverageAllFavoriteViewsDatasets = data => [{\n  label: i18n.t('Average Map'),\n  data: data.map(d => d.averageMapViews),\n  borderColor: COLOR_1\n}, {\n  label: i18n.t('Average Chart'),\n  data: data.map(d => d.averageChartViews),\n  borderColor: COLOR_2\n}, {\n  label: i18n.t('Average Pivot Table'),\n  data: data.map(d => d.averagePivotTableViews),\n  borderColor: COLOR_3\n}, {\n  label: i18n.t('Average Event Report'),\n  data: data.map(d => d.averageEventReportViews),\n  borderColor: COLOR_4\n}, {\n  label: i18n.t('Average Event Chart'),\n  data: data.map(d => d.averageEventChartViews),\n  borderColor: COLOR_5\n}, {\n  label: i18n.t('Average Dashboard'),\n  data: data.map(d => d.averageDashboardViews),\n  borderColor: COLOR_6\n}];\nexport const getAverageTotalFavoriteViewsDatasets = data => [{\n  label: i18n.t('Average'),\n  data: data.map(d => d.averageViews),\n  borderColor: COLOR_1\n}];","import i18n from '@dhis2/d2-i18n';\n/**\n * These are the options we apply to each Line graph.\n * For documentation on the options see:\n *\n * - https://github.com/reactchartjs/react-chartjs-2\n * - https://www.chartjs.org/docs/latest/\n */\n\nconst options = {\n  animation: {\n    duration: 180\n  },\n  legend: {\n    position: 'bottom'\n  },\n  maintainAspectRatio: false,\n  elements: {\n    line: {\n      tension: 0,\n      fill: false,\n      backgroundColor: 'rgba(0, 0, 0, 0)'\n    }\n  },\n  scales: {\n    yAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: i18n.t('Values')\n      }\n    }]\n  }\n};\nexport default options;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport { USERS } from '../../constants/categories.js';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getUsersDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst UsersChart = ({\n  data,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(USERS);\n  const labels = getLabels(data, interval);\n  const datasets = getUsersDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nUsersChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    activeUsers: PropTypes.number.isRequired,\n    users: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default UsersChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport { DATA_VALUES } from '../../constants/categories.js';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getDataValuesDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst DataValuesChart = ({\n  data,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(DATA_VALUES);\n  const labels = getLabels(data, interval);\n  const datasets = getDataValuesDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nDataValuesChart.propTypes = {\n  interval: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    savedDataValues: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  }))\n};\nexport default DataValuesChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport { FAVORITES_SAVED } from '../../constants/categories.js';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getFavoritesSavedDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst FavoritesSavedChart = ({\n  data,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(FAVORITES_SAVED);\n  const labels = getLabels(data, interval);\n  const datasets = getFavoritesSavedDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nFavoritesSavedChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    savedCharts: PropTypes.number.isRequired,\n    savedDashboards: PropTypes.number.isRequired,\n    savedEventCharts: PropTypes.number.isRequired,\n    savedEventReports: PropTypes.number.isRequired,\n    savedIndicators: PropTypes.number.isRequired,\n    savedMaps: PropTypes.number.isRequired,\n    savedPivotTables: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default FavoritesSavedChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport { FAVORITE_VIEWS } from '../../constants/categories.js';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getSumAllFavoriteViewsDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst SumAllFavoriteViewsChart = ({\n  data,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(FAVORITE_VIEWS);\n  const labels = getLabels(data, interval);\n  const datasets = getSumAllFavoriteViewsDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nSumAllFavoriteViewsChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    chartViews: PropTypes.number.isRequired,\n    dashboardViews: PropTypes.number.isRequired,\n    dataSetReportViews: PropTypes.number.isRequired,\n    eventChartViews: PropTypes.number.isRequired,\n    eventReportViews: PropTypes.number.isRequired,\n    mapViews: PropTypes.number.isRequired,\n    pivotTableViews: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default SumAllFavoriteViewsChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport { FAVORITE_VIEWS } from '../../constants/categories.js';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getSumTotalFavoriteViewsDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst SumTotalFavoriteViewsChart = ({\n  data,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(FAVORITE_VIEWS);\n  const labels = getLabels(data, interval);\n  const datasets = getSumTotalFavoriteViewsDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nSumTotalFavoriteViewsChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    totalViews: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default SumTotalFavoriteViewsChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport { FAVORITE_VIEWS } from '../../constants/categories.js';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getAverageAllFavoriteViewsDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst AverageAllFavoriteViewsChart = ({\n  data,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(FAVORITE_VIEWS);\n  const labels = getLabels(data, interval);\n  const datasets = getAverageAllFavoriteViewsDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nAverageAllFavoriteViewsChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    averageChartViews: PropTypes.number.isRequired,\n    averageDashboardViews: PropTypes.number.isRequired,\n    averageEventChartViews: PropTypes.number.isRequired,\n    averageEventReportViews: PropTypes.number.isRequired,\n    averageMapViews: PropTypes.number.isRequired,\n    averagePivotTableViews: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default AverageAllFavoriteViewsChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport { FAVORITE_VIEWS } from '../../constants/categories.js';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getAverageTotalFavoriteViewsDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst AverageTotalFavoriteViewsChart = ({\n  data,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(FAVORITE_VIEWS);\n  const labels = getLabels(data, interval);\n  const datasets = getAverageTotalFavoriteViewsDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nAverageTotalFavoriteViewsChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    averageViews: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default AverageTotalFavoriteViewsChart;","import React, { Fragment } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { DataValuesTable } from '../Tables/index.js';\nimport { DataValuesChart } from '../Charts/index.js';\nimport { DataStatisticsQuery } from '../Queries/index.js';\nconst fields = ['year', 'month', 'week', 'day', 'savedDataValues'];\n\nconst DataValuesVisualization = ({\n  endDate,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => <DataStatisticsQuery endDate={endDate} fields={fields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n        {data => <Fragment>\n                <DataValuesChart data={data} interval={interval} />\n                <DataValuesTable data={data} interval={interval} />\n            </Fragment>}\n    </DataStatisticsQuery>;\n\nDataValuesVisualization.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default DataValuesVisualization;","import React, { Fragment } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { UsersTable } from '../Tables/index.js';\nimport { UsersChart } from '../Charts/index.js';\nimport { DataStatisticsQuery } from '../Queries/index.js';\nconst fields = ['year', 'month', 'week', 'day', 'activeUsers', 'users'];\n\nconst UsersVisualization = ({\n  endDate,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => <DataStatisticsQuery endDate={endDate} fields={fields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n        {data => <Fragment>\n                <UsersChart data={data} interval={interval} />\n                <UsersTable data={data} interval={interval} />\n            </Fragment>}\n    </DataStatisticsQuery>;\n\nUsersVisualization.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default UsersVisualization;","import React, { Fragment } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { FavoritesSavedTable } from '../Tables/index.js';\nimport { FavoritesSavedChart } from '../Charts/index.js';\nimport { DataStatisticsQuery } from '../Queries/index.js';\nconst fields = ['year', 'month', 'week', 'day', 'savedMaps', 'savedCharts', 'savedPivotTables', 'savedEventReports', 'savedEventCharts', 'savedDashboards', 'savedIndicators'];\n\nconst FavoritesSavedVisualization = ({\n  endDate,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => <DataStatisticsQuery endDate={endDate} fields={fields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n        {data => <Fragment>\n                <FavoritesSavedChart data={data} interval={interval} />\n                <FavoritesSavedTable data={data} interval={interval} />\n            </Fragment>}\n    </DataStatisticsQuery>;\n\nFavoritesSavedVisualization.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default FavoritesSavedVisualization;","import React, { Fragment } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { SUM } from '../../constants/aggregations.js';\nimport { ALL } from '../../constants/chartTypes.js';\nimport { SumAllFavoriteViewsChart, SumTotalFavoriteViewsChart, AverageAllFavoriteViewsChart, AverageTotalFavoriteViewsChart } from '../Charts/index.js';\nimport { SumFavoriteViewsTable, AverageFavoriteViewsTable } from '../Tables/index.js';\nimport { DataStatisticsQuery } from '../Queries/index.js';\nconst fields = ['year', 'month', 'week', 'day'];\nconst sumFields = [...fields, 'mapViews', 'chartViews', 'pivotTableViews', 'eventReportViews', 'eventChartViews', 'dashboardViews', 'dataSetReportViews', 'totalViews'];\nconst averageFields = [...fields, 'averageMapViews', 'averageChartViews', 'averagePivotTableViews', 'averageEventReportViews', 'averageEventChartViews', 'averageDashboardViews', 'averageViews'];\n\nconst FavoriteViewsVisualization = ({\n  aggregation,\n  chartType,\n  endDate,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => {\n  const isSum = aggregation === SUM;\n  const isAll = chartType === ALL;\n\n  if (isSum) {\n    return <DataStatisticsQuery endDate={endDate} fields={sumFields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n                {data => <Fragment>\n                        {isAll ? <SumAllFavoriteViewsChart data={data} interval={interval} /> : <SumTotalFavoriteViewsChart data={data} interval={interval} />}\n                        <SumFavoriteViewsTable data={data} interval={interval} />\n                    </Fragment>}\n            </DataStatisticsQuery>;\n  }\n\n  return <DataStatisticsQuery endDate={endDate} fields={averageFields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n            {data => <Fragment>\n                    {isAll ? <AverageAllFavoriteViewsChart data={data} interval={interval} /> : <AverageTotalFavoriteViewsChart data={data} interval={interval} />}\n                    <AverageFavoriteViewsTable data={data} interval={interval} />\n                </Fragment>}\n        </DataStatisticsQuery>;\n};\n\nFavoriteViewsVisualization.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  chartType: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default FavoriteViewsVisualization;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { NoticeBox } from '@dhis2/ui';\nimport { TOP_FAVORITES, DATA_VALUES, USERS, FAVORITES_SAVED, FAVORITE_VIEWS } from '../../constants/categories.js';\nimport TopFavoritesVisualization from './TopFavoritesVisualization.js';\nimport DataValuesVisualization from './DataValuesVisualization.js';\nimport UsersVisualization from './UsersVisualization.js';\nimport FavoritesSavedVisualization from './FavoritesSavedVisualization.js';\nimport FavoriteViewsVisualization from './FavoriteViewsVisualization.js';\n\nconst Visualization = ({\n  aggregation,\n  category,\n  chartType,\n  endDate,\n  eventType,\n  interval,\n  isIntervalStale,\n  pageSize,\n  setIsIntervalStale,\n  sortOrder,\n  startDate\n}) => {\n  switch (category) {\n    case TOP_FAVORITES:\n      return <TopFavoritesVisualization eventType={eventType} pageSize={pageSize} sortOrder={sortOrder} />;\n\n    case DATA_VALUES:\n      return <DataValuesVisualization endDate={endDate} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate} />;\n\n    case USERS:\n      return <UsersVisualization endDate={endDate} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate} />;\n\n    case FAVORITES_SAVED:\n      return <FavoritesSavedVisualization endDate={endDate} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate} />;\n\n    case FAVORITE_VIEWS:\n      return <FavoriteViewsVisualization aggregation={aggregation} chartType={chartType} endDate={endDate} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate} />;\n\n    default:\n      return <NoticeBox error title={i18n.t('Unrecognized category')}>\n                    {i18n.t('The chosen category was not recognized.')}\n                </NoticeBox>;\n  }\n};\n\nVisualization.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  chartType: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  eventType: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  sortOrder: PropTypes.string.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default Visualization;","import moment from 'moment';\n/**\n * This creates the default start and end dates for the app state. The format\n * is YYYY-MM-DD because that's what a date input expects, and that's what these\n * dates will be used for.\n *\n * The default is to have the end date at the current time, and the start date\n * 4 months before that.\n */\n\nconst createDefaultDates = () => {\n  const now = Date.now();\n  const format = 'YYYY-MM-DD';\n  const initialStartDate = moment(now).subtract(4, 'months').format(format);\n  const initialEndDate = moment(now).format(format);\n  return {\n    initialStartDate,\n    initialEndDate\n  };\n};\n\nexport default createDefaultDates;","import React, { useState } from 'react';\nimport { CssVariables } from '@dhis2/ui';\nimport { FAVORITE_VIEWS } from '../../constants/categories.js';\nimport { WEEK } from '../../constants/intervals.js';\nimport { SUM } from '../../constants/aggregations.js';\nimport { ALL } from '../../constants/chartTypes.js';\nimport { CHART_VIEW } from '../../constants/eventTypes.js';\nimport { PS_25 } from '../../constants/pageSizes.js';\nimport { ASC } from '../../constants/sortOrders.js';\nimport Filters from '../Filters/index.js';\nimport { LayoutContainer, LayoutSidebar, LayoutContent } from '../Layout/index.js';\nimport CategoryField from '../CategoryField/index.js';\nimport AppTitle from '../AppTitle/index.js';\nimport Visualization from '../Visualization/index.js';\nimport createDefaultDates from './createDefaultDates.js';\n\nconst App = () => {\n  const {\n    initialStartDate,\n    initialEndDate\n  } = createDefaultDates(); // State\n\n  const [aggregation, setAggregation] = useState(SUM);\n  const [category, setCategory] = useState(FAVORITE_VIEWS);\n  const [chartType, setChartType] = useState(ALL);\n  const [endDate, setEndDate] = useState(initialEndDate);\n  const [eventType, setEventType] = useState(CHART_VIEW);\n  const [pageSize, setPageSize] = useState(PS_25);\n  const [sortOrder, setSortOrder] = useState(ASC);\n  const [startDate, setStartDate] = useState(initialStartDate); // We're calling the setter setReportInterval so we don't shadow the global setInterval\n\n  const [interval, setReportInterval] = useState(WEEK);\n  /**\n   * The rendering of the different date intervals in the charts and tables\n   * will crash if the props and the data aren't in sync. To prevent stale\n   * props from being used we're tracking the stale status of interval.\n   */\n\n  const [isIntervalStale, setIsIntervalStale] = useState(false);\n\n  const setIsStaleAndInterval = interval => {\n    setIsIntervalStale(true);\n    setReportInterval(interval);\n  };\n\n  return <React.Fragment>\n            <CssVariables spacers colors />\n            <LayoutContainer>\n                <LayoutSidebar>\n                    <AppTitle />\n                    <CategoryField category={category} setCategory={setCategory} />\n                    <Filters aggregation={aggregation} category={category} chartType={chartType} endDate={endDate} eventType={eventType} interval={interval} pageSize={pageSize} setAggregation={setAggregation} setChartType={setChartType} setEndDate={setEndDate} setEventType={setEventType} setReportInterval={setIsStaleAndInterval} setPageSize={setPageSize} setSortOrder={setSortOrder} setStartDate={setStartDate} sortOrder={sortOrder} startDate={startDate} />\n                </LayoutSidebar>\n                <LayoutContent>\n                    <Visualization aggregation={aggregation} category={category} chartType={chartType} endDate={endDate} eventType={eventType} interval={interval} isIntervalStale={isIntervalStale} pageSize={pageSize} setIsIntervalStale={setIsIntervalStale} sortOrder={sortOrder} startDate={startDate} />\n                </LayoutContent>\n            </LayoutContainer>\n        </React.Fragment>;\n};\n\nexport default App;"],"sourceRoot":""}