{"version":3,"sources":["D2App/components/Layout/LayoutContainer.module.css","D2App/components/Layout/LayoutSidebar.module.css","D2App/components/Layout/LayoutContent.module.css","D2App/components/AppTitle/AppTitle.module.css","D2App/components/Charts/ChartHeader.module.css","D2App/components/Charts/ChartWrapper.module.css","D2App/constants/categories.js","D2App/constants/intervals.js","D2App/constants/aggregations.js","D2App/constants/chartTypes.js","D2App/constants/eventTypes.js","D2App/constants/pageSizes.js","D2App/constants/sortOrders.js","D2App/components/FilterFields/validators.js","D2App/components/FilterFields/DateRangeField.js","D2App/components/FilterFields/IntervalField.js","D2App/components/FilterFields/AggregationField.js","D2App/components/FilterFields/ChartTypeField.js","D2App/components/FilterFields/EventTypeField.js","D2App/components/FilterFields/PageSizeField.js","D2App/components/FilterFields/SortOrderField.js","D2App/components/FilterFields/FilterFields.js","D2App/components/Layout/LayoutContainer.js","D2App/components/Layout/LayoutSidebar.js","D2App/components/Layout/LayoutContent.js","D2App/components/CategoryField/CategoryField.js","D2App/components/AppTitle/AppTitle.js","D2App/selectors/date.js","D2App/components/Tables/TableWrapper.js","D2App/components/Tables/DataValuesTable.js","D2App/components/Tables/UsersTable.js","D2App/components/Tables/FavoritesSavedTable.js","D2App/components/Tables/SumFavoriteViewsTable.js","D2App/components/Tables/AverageFavoriteViewsTable.js","D2App/components/Tables/TopFavoritesTable.js","D2App/components/Queries/TopFavoritesQuery.js","D2App/components/Queries/DataStatisticsQuery.js","D2App/components/Visualization/TopFavoritesVisualization.js","D2App/components/Charts/ChartHeader.js","D2App/components/Charts/ChartWrapper.js","D2App/components/Charts/selectors.js","D2App/components/Charts/options.js","D2App/components/Charts/UsersChart.js","D2App/components/Charts/DataValuesChart.js","D2App/components/Charts/FavoritesSavedChart.js","D2App/components/Charts/SumAllFavoriteViewsChart.js","D2App/components/Charts/SumTotalFavoriteViewsChart.js","D2App/components/Charts/AverageAllFavoriteViewsChart.js","D2App/components/Charts/AverageTotalFavoriteViewsChart.js","D2App/components/Visualization/DataValuesVisualization.js","D2App/components/Visualization/UsersVisualization.js","D2App/components/Visualization/FavoritesSavedVisualization.js","D2App/components/Visualization/FavoriteViewsVisualization.js","D2App/components/Visualization/Visualization.js","D2App/components/App/createDefaultDates.js","D2App/components/App/App.js","D2App/components/App/index.js"],"names":["module","exports","categories","value","label","i18n","t","subtitle","intervals","aggregations","chartTypes","eventTypes","pageSizes","sortOrders","validateStartDate","startDate","endDate","startMoment","moment","endMoment","isAfter","validateEndDate","isBefore","validateDate","date","isValid","DateRangeField","setStartDate","setEndDate","setIsDateValid","useState","startDateError","setStartDateError","endDateError","setEndDateError","type","error","validationText","onChange","errorMessage","endDateErrorMessage","startDateErrorMessage","IntervalField","interval","setInterval","selected","map","key","AggregationField","aggregation","setAggregation","ChartTypeField","chartType","setChartType","EventTypeField","eventType","setEventType","PageSizeField","pageSize","setPageSize","SortOrderField","sortOrder","setSortOrder","FilterFields","category","isTopFavorites","isFavoriteViews","showDateRange","showInterval","showAggregation","showChartType","showEventType","showPageSize","showSortOrder","Fragment","LayoutContainer","children","className","styles","container","LayoutSidebar","sidebar","LayoutContent","content","CategoryField","setCategory","AppTitle","title","getIntervalDate","year","month","week","day","format","zeroIndexedMonth","TableWrapper","DataValuesTable","data","savedDataValues","intervalDate","UsersTable","activeUsers","users","FavoritesSavedTable","savedMaps","savedCharts","savedPivotTables","savedEventReports","savedEventCharts","savedDashboards","savedIndicators","SumFavoriteViewsTable","mapViews","chartViews","pivotTableViews","eventReportViews","eventChartViews","dashboardViews","dataSetReportViews","totalViews","AverageFavoriteViewsTable","averageMapViews","averageChartViews","averagePivotTableViews","averageEventReportViews","averageEventChartViews","averageDashboardViews","averageViews","TopFavoritesTable","position","name","views","id","created","timestamp","query","favorites","resource","params","fields","TopFavoritesQuery","useDataQuery","lazy","variables","loading","called","refetch","useEffect","dataStatistics","DataStatisticsQuery","isIntervalStale","setIsIntervalStale","onDone","onComplete","onError","TopFavoritesVisualization","ChartHeader","ChartWrapper","outerContainer","innerContainer","chartContainer","getTitles","selectedCategory","CATEGORIES","find","getLabels","options","animation","duration","legend","maintainAspectRatio","elements","line","tension","fill","backgroundColor","scales","yAxes","scaleLabel","display","labelString","UsersChart","labels","datasets","d","borderColor","getUsersDatasets","DataValuesChart","getDataValuesDatasets","FavoritesSavedChart","getFavoritesSavedDatasets","SumAllFavoriteViewsChart","getSumAllFavoriteViewsDatasets","SumTotalFavoriteViewsChart","getSumTotalFavoriteViewsDatasets","AverageAllFavoriteViewsChart","getAverageAllFavoriteViewsDatasets","AverageTotalFavoriteViewsChart","getAverageTotalFavoriteViewsDatasets","DataValuesVisualization","UsersVisualization","FavoritesSavedVisualization","sumFields","averageFields","FavoriteViewsVisualization","isAll","Visualization","isDateValid","Error","createDefaultDates","initialStartDate","subtract","initialEndDate","App"],"mappings":"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","file":"static/js/app.06998d26.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LayoutContainer_container__2gt-1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"LayoutSidebar_sidebar__38x-X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"LayoutContent_content__3pEdj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"AppTitle_title__mjsfQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ChartHeader_title__ff7A2\",\"subtitle\":\"ChartHeader_subtitle__2JAVZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"ChartWrapper_outerContainer__2BU2T\",\"innerContainer\":\"ChartWrapper_innerContainer__5ZEsg\",\"chartContainer\":\"ChartWrapper_chartContainer__jt1gD\"};","import i18n from '@dhis2/d2-i18n';\nexport const FAVORITE_VIEWS = 'FAVORITE_VIEWS';\nexport const FAVORITES_SAVED = 'FAVORITES_SAVED';\nexport const USERS = 'USERS';\nexport const TOP_FAVORITES = 'TOP_FAVORITES';\nexport const DATA_VALUES = 'DATA_VALUES';\nconst categories = [{\n  value: FAVORITE_VIEWS,\n  label: i18n.t('Favorite views'),\n  subtitle: i18n.t('Number of times users looked at analysis favorites')\n}, {\n  value: FAVORITES_SAVED,\n  label: i18n.t('Favorites saved'),\n  subtitle: i18n.t('Number of analysis favorites created by users')\n}, {\n  value: USERS,\n  label: i18n.t('Users'),\n  subtitle: i18n.t('Number of users in the system')\n}, {\n  value: TOP_FAVORITES,\n  label: i18n.t('Top favorites')\n}, {\n  value: DATA_VALUES,\n  label: i18n.t('Data values'),\n  subtitle: i18n.t('Number of data values saved in the system')\n}];\nexport default categories;","import i18n from '@dhis2/d2-i18n';\nexport const DAY = 'DAY';\nexport const WEEK = 'WEEK';\nexport const MONTH = 'MONTH';\nexport const YEAR = 'YEAR';\nconst intervals = [{\n  value: DAY,\n  label: i18n.t('Day')\n}, {\n  value: WEEK,\n  label: i18n.t('Week')\n}, {\n  value: MONTH,\n  label: i18n.t('Month')\n}, {\n  value: YEAR,\n  label: i18n.t('Year')\n}];\nexport default intervals;","import i18n from '@dhis2/d2-i18n';\nexport const SUM = 'SUM';\nexport const AVERAGE = 'AVERAGE';\nconst aggregations = [{\n  value: SUM,\n  label: i18n.t('Sum')\n}, {\n  value: AVERAGE,\n  label: i18n.t('Average')\n}];\nexport default aggregations;","import i18n from '@dhis2/d2-i18n';\nexport const ALL = 'ALL';\nexport const TOTAL = 'TOTAL';\nconst chartTypes = [{\n  value: ALL,\n  label: i18n.t('All')\n}, {\n  value: TOTAL,\n  label: i18n.t('Total')\n}];\nexport default chartTypes;","import i18n from '@dhis2/d2-i18n';\nexport const CHART_VIEW = 'CHART_VIEW';\nexport const MAP_VIEW = 'MAP_VIEW';\nexport const REPORT_TABLE_VIEW = 'REPORT_TABLE_VIEW';\nexport const EVENT_REPORT_VIEW = 'EVENT_REPORT_VIEW';\nexport const EVENT_CHART_VIEW = 'EVENT_CHART_VIEW';\nexport const DASHBOARD_VIEW = 'DASHBOARD_VIEW';\nexport const DATA_SET_REPORT_VIEW = 'DATA_SET_REPORT_VIEW';\nconst eventTypes = [{\n  value: CHART_VIEW,\n  label: i18n.t('Chart')\n}, {\n  value: MAP_VIEW,\n  label: i18n.t('Map')\n}, {\n  value: REPORT_TABLE_VIEW,\n  label: i18n.t('Report table')\n}, {\n  value: EVENT_REPORT_VIEW,\n  label: i18n.t('Event report')\n}, {\n  value: EVENT_CHART_VIEW,\n  label: i18n.t('Event chart')\n}, {\n  value: DASHBOARD_VIEW,\n  label: i18n.t('Dashboard')\n}, {\n  value: DATA_SET_REPORT_VIEW,\n  label: i18n.t('Data set report')\n}];\nexport default eventTypes;","export const PS_5 = '5';\nexport const PS_10 = '10';\nexport const PS_15 = '15';\nexport const PS_20 = '20';\nexport const PS_25 = '25';\nconst pageSizes = [{\n  value: PS_5,\n  label: '5'\n}, {\n  value: PS_10,\n  label: '10'\n}, {\n  value: PS_15,\n  label: '15'\n}, {\n  value: PS_20,\n  label: '20'\n}, {\n  value: PS_25,\n  label: '25'\n}];\nexport default pageSizes;","import i18n from '@dhis2/d2-i18n';\nexport const ASC = 'ASC';\nexport const DESC = 'DESC';\nconst sortOrders = [{\n  value: ASC,\n  label: i18n.t('Ascending')\n}, {\n  value: DESC,\n  label: i18n.t('Descending')\n}];\nexport default sortOrders;","import moment from 'moment';\nimport i18n from '@dhis2/d2-i18n'; // The expected date format\n\nconst expectedFormat = 'YYYY-MM-DD'; // Validates a start date, compared to an end date\n\nexport const validateStartDate = (startDate, endDate) => {\n  const startMoment = moment(startDate, expectedFormat);\n  const endMoment = moment(endDate, expectedFormat);\n\n  if (startMoment.isAfter(endMoment)) {\n    return i18n.t('Start date should be before end date');\n  }\n\n  return '';\n}; // Validates an end date, compared to a start date\n\nexport const validateEndDate = (startDate, endDate) => {\n  const startMoment = moment(startDate, expectedFormat);\n  const endMoment = moment(endDate, expectedFormat);\n\n  if (endMoment.isBefore(startMoment)) {\n    return i18n.t('End date should be after start date');\n  }\n\n  return '';\n}; // Validates a single date\n\nexport const validateDate = date => {\n  if (!date) {\n    return i18n.t('Please fill in a date');\n  } // The 'true' flag ensures strict validation of the expected format\n\n\n  const dateMoment = moment(date, expectedFormat, true);\n\n  if (!dateMoment.isValid()) {\n    return i18n.t('Please use the format yyyy-mm-dd');\n  }\n\n  return '';\n};","import React, { useState } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { InputField } from '@dhis2/ui';\nimport { validateStartDate, validateEndDate, validateDate } from './validators.js';\n\nconst DateRangeField = ({\n  startDate,\n  setStartDate,\n  endDate,\n  setEndDate,\n  setIsDateValid\n}) => {\n  const [startDateError, setStartDateError] = useState('');\n  const [endDateError, setEndDateError] = useState('');\n\n  const onStartDateChange = ({\n    value\n  }) => {\n    // First generic validation, then the field specific validation\n    const errorMessage = validateDate(value) || validateStartDate(value, endDate);\n\n    if (errorMessage) {\n      setStartDateError(errorMessage);\n      setIsDateValid(false);\n    } else {\n      // Clear the error if it's been resolved\n      setStartDateError('');\n    } // Revalidate the end date\n\n\n    const endDateErrorMessage = validateDate(endDate) || validateEndDate(value, endDate);\n\n    if (!errorMessage && !endDateErrorMessage) {\n      // If both fields have become valid update the error and valid states\n      setEndDateError('');\n      setIsDateValid(true);\n    } // Finally, update the state\n\n\n    setStartDate(value);\n  };\n\n  const onEndDateChange = ({\n    value\n  }) => {\n    // First generic validation, then the field specific validation\n    const errorMessage = validateDate(value) || validateEndDate(startDate, value);\n\n    if (errorMessage) {\n      setEndDateError(errorMessage);\n      setIsDateValid(false);\n    } else {\n      // Clear the error if it's been resolved\n      setEndDateError('');\n    } // Revalidate the start date\n\n\n    const startDateErrorMessage = validateDate(startDate) || validateStartDate(startDate, value);\n\n    if (!errorMessage && !startDateErrorMessage) {\n      // If both fields have become valid update the error and valid states\n      setStartDateError('');\n      setIsDateValid(true);\n    } // Finally, update the state\n\n\n    setEndDate(value);\n  };\n\n  return <div>\n            <InputField label={i18n.t('Start Date')} type=\"date\" value={startDate} error={!!startDateError} validationText={startDateError} onChange={onStartDateChange} />\n            <InputField label={i18n.t('End Date')} type=\"date\" value={endDate} error={!!endDateError} validationText={endDateError} onChange={onEndDateChange} />\n        </div>;\n};\n\nDateRangeField.propTypes = {\n  endDate: PropTypes.string.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setIsDateValid: PropTypes.func.isRequired,\n  setStartDate: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default DateRangeField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport intervals from '../../constants/intervals.js';\n\nconst IntervalField = ({\n  interval,\n  setInterval\n}) => <SingleSelectField selected={interval} onChange={({\n  selected\n}) => {\n  setInterval(selected);\n}} label={i18n.t('Interval')}>\n        {intervals.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nIntervalField.propTypes = {\n  interval: PropTypes.string.isRequired,\n  setInterval: PropTypes.func.isRequired\n};\nexport default IntervalField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport aggregations from '../../constants/aggregations.js';\n\nconst AggregationField = ({\n  aggregation,\n  setAggregation\n}) => <SingleSelectField selected={aggregation} onChange={({\n  selected\n}) => {\n  setAggregation(selected);\n}} label={i18n.t('Aggregation Level')}>\n        {aggregations.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nAggregationField.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  setAggregation: PropTypes.func.isRequired\n};\nexport default AggregationField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport chartTypes from '../../constants/chartTypes.js';\n\nconst ChartTypeField = ({\n  chartType,\n  setChartType\n}) => <SingleSelectField selected={chartType} onChange={({\n  selected\n}) => {\n  setChartType(selected);\n}} label={i18n.t('Chart Type')}>\n        {chartTypes.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nChartTypeField.propTypes = {\n  chartType: PropTypes.string.isRequired,\n  setChartType: PropTypes.func.isRequired\n};\nexport default ChartTypeField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport eventTypes from '../../constants/eventTypes.js';\n\nconst EventTypeField = ({\n  eventType,\n  setEventType\n}) => <SingleSelectField selected={eventType} onChange={({\n  selected\n}) => {\n  setEventType(selected);\n}} label={i18n.t('Event Type')}>\n        {eventTypes.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nEventTypeField.propTypes = {\n  eventType: PropTypes.string.isRequired,\n  setEventType: PropTypes.func.isRequired\n};\nexport default EventTypeField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport pageSizes from '../../constants/pageSizes.js';\n\nconst PageSizeField = ({\n  pageSize,\n  setPageSize\n}) => <SingleSelectField selected={pageSize} onChange={({\n  selected\n}) => {\n  setPageSize(selected);\n}} label={i18n.t('Page Size')}>\n        {pageSizes.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nPageSizeField.propTypes = {\n  pageSize: PropTypes.string.isRequired,\n  setPageSize: PropTypes.func.isRequired\n};\nexport default PageSizeField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport sortOrders from '../../constants/sortOrders.js';\n\nconst SortOrderField = ({\n  sortOrder,\n  setSortOrder\n}) => <SingleSelectField selected={sortOrder} onChange={({\n  selected\n}) => {\n  setSortOrder(selected);\n}} label={i18n.t('Sort Order')}>\n        {sortOrders.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nSortOrderField.propTypes = {\n  setSortOrder: PropTypes.func.isRequired,\n  sortOrder: PropTypes.string.isRequired\n};\nexport default SortOrderField;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { FAVORITE_VIEWS, TOP_FAVORITES } from '../../constants/categories.js';\nimport DateRangeField from './DateRangeField.js';\nimport IntervalField from './IntervalField.js';\nimport AggregationField from './AggregationField.js';\nimport ChartTypeField from './ChartTypeField.js';\nimport EventTypeField from './EventTypeField.js';\nimport PageSizeField from './PageSizeField.js';\nimport SortOrderField from './SortOrderField.js';\n\nconst FilterFields = ({\n  aggregation,\n  category,\n  chartType,\n  endDate,\n  eventType,\n  interval,\n  pageSize,\n  setAggregation,\n  setChartType,\n  setEndDate,\n  setEventType,\n  setInterval,\n  setIsDateValid,\n  setPageSize,\n  setSortOrder,\n  setStartDate,\n  sortOrder,\n  startDate\n}) => {\n  // Category checks\n  const isTopFavorites = category === TOP_FAVORITES;\n  const isFavoriteViews = category === FAVORITE_VIEWS; // Checks determining whether fields should be shown or not\n\n  const showDateRange = !isTopFavorites;\n  const showInterval = !isTopFavorites;\n  const showAggregation = isFavoriteViews;\n  const showChartType = isFavoriteViews;\n  const showEventType = isTopFavorites;\n  const showPageSize = isTopFavorites;\n  const showSortOrder = isTopFavorites;\n  return <React.Fragment>\n            {showDateRange && <DateRangeField startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate} setIsDateValid={setIsDateValid} />}\n            {showInterval && <IntervalField interval={interval} setInterval={setInterval} />}\n            {showAggregation && <AggregationField aggregation={aggregation} setAggregation={setAggregation} />}\n            {showChartType && <ChartTypeField chartType={chartType} setChartType={setChartType} />}\n            {showEventType && <EventTypeField eventType={eventType} setEventType={setEventType} />}\n            {showPageSize && <PageSizeField pageSize={pageSize} setPageSize={setPageSize} />}\n            {showSortOrder && <SortOrderField sortOrder={sortOrder} setSortOrder={setSortOrder} />}\n        </React.Fragment>;\n};\n\nFilterFields.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  chartType: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  eventType: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  setAggregation: PropTypes.func.isRequired,\n  setChartType: PropTypes.func.isRequired,\n  setEndDate: PropTypes.func.isRequired,\n  setEventType: PropTypes.func.isRequired,\n  setInterval: PropTypes.func.isRequired,\n  setIsDateValid: PropTypes.func.isRequired,\n  setPageSize: PropTypes.func.isRequired,\n  setSortOrder: PropTypes.func.isRequired,\n  setStartDate: PropTypes.func.isRequired,\n  sortOrder: PropTypes.string.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default FilterFields;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport styles from './LayoutContainer.module.css';\n\nconst LayoutContainer = ({\n  children\n}) => <main className={styles.container}>{children}</main>;\n\nLayoutContainer.propTypes = {\n  children: PropTypes.node\n};\nexport default LayoutContainer;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport styles from './LayoutSidebar.module.css';\n\nconst LayoutSidebar = ({\n  children\n}) => <aside className={styles.sidebar}>{children}</aside>;\n\nLayoutSidebar.propTypes = {\n  children: PropTypes.node\n};\nexport default LayoutSidebar;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport styles from './LayoutContent.module.css';\n\nconst LayoutContent = ({\n  children\n}) => <section className={styles.content}>{children}</section>;\n\nLayoutContent.propTypes = {\n  children: PropTypes.node\n};\nexport default LayoutContent;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport categories from '../../constants/categories.js';\n\nconst CategoryField = ({\n  category,\n  setCategory\n}) => <SingleSelectField selected={category} onChange={({\n  selected\n}) => {\n  setCategory(selected);\n}} label={i18n.t('Category')}>\n        {categories.map(({\n    label,\n    value\n  }) => <SingleSelectOption label={label} key={value} value={value} />)}\n    </SingleSelectField>;\n\nCategoryField.propTypes = {\n  category: PropTypes.string.isRequired,\n  setCategory: PropTypes.func.isRequired\n};\nexport default CategoryField;","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport styles from './AppTitle.module.css';\n\nconst AppTitle = () => <h1 className={styles.title}>{i18n.t('Usage Analytics')}</h1>;\n\nexport default AppTitle;","import i18n from '@dhis2/d2-i18n';\nimport moment from 'moment';\nimport { YEAR, MONTH, WEEK, DAY } from '../constants/intervals.js';\n/**\n * This selector receives 1-indexed months. But moment expects 0-indexed months,\n * so we subtract 1 whenever a month is provided to moment\n */\n\nexport const getIntervalDate = ({\n  year,\n  month,\n  week,\n  day\n}, interval) => {\n  switch (interval) {\n    case YEAR:\n      {\n        return moment({\n          year\n        }).format('YYYY');\n      }\n\n    case MONTH:\n      {\n        const zeroIndexedMonth = month - 1;\n        const format = 'MMM YYYY';\n        return moment({\n          year,\n          month: zeroIndexedMonth\n        }).format(format);\n      }\n\n    case WEEK:\n      {\n        const format = `[${i18n.t('Week')}] [${week}] / YYYY`;\n        return moment({\n          year\n        }).format(format);\n      }\n\n    case DAY:\n      {\n        const zeroIndexedMonth = month - 1;\n        const format = 'MMM D, YYYY';\n        return moment({\n          year,\n          month: zeroIndexedMonth,\n          day\n        }).format(format);\n      }\n  }\n};","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Card } from '@dhis2/ui';\n/**\n * The div wrapping the Card is used to constrain the 100% height of the Card.\n */\n\nconst TableWrapper = ({\n  children\n}) => <div>\n        <Card>{children}</Card>\n    </div>;\n\nTableWrapper.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default TableWrapper;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst DataValuesTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Data Values')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        savedDataValues\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                            <TableCell>{intervalDate}</TableCell>\n                            <TableCell>{savedDataValues}</TableCell>\n                        </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nDataValuesTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    savedDataValues: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default DataValuesTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst UsersTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Active Users')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Total Users')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        activeUsers,\n        users\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                            <TableCell>{intervalDate}</TableCell>\n                            <TableCell>{activeUsers}</TableCell>\n                            <TableCell>{users}</TableCell>\n                        </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nUsersTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    activeUsers: PropTypes.number.isRequired,\n    users: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default UsersTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst FavoritesSavedTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Maps')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Charts')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Pivot Tables')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Event Reports')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Event Charts')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Dashboards')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Indicators')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        savedMaps,\n        savedCharts,\n        savedPivotTables,\n        savedEventReports,\n        savedEventCharts,\n        savedDashboards,\n        savedIndicators\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                                <TableCell>{intervalDate}</TableCell>\n                                <TableCell>{savedMaps}</TableCell>\n                                <TableCell>{savedCharts}</TableCell>\n                                <TableCell>{savedPivotTables}</TableCell>\n                                <TableCell>{savedEventReports}</TableCell>\n                                <TableCell>{savedEventCharts}</TableCell>\n                                <TableCell>{savedDashboards}</TableCell>\n                                <TableCell>{savedIndicators}</TableCell>\n                            </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nFavoritesSavedTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    savedCharts: PropTypes.number.isRequired,\n    savedDashboards: PropTypes.number.isRequired,\n    savedEventCharts: PropTypes.number.isRequired,\n    savedEventReports: PropTypes.number.isRequired,\n    savedIndicators: PropTypes.number.isRequired,\n    savedMaps: PropTypes.number.isRequired,\n    savedPivotTables: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default FavoritesSavedTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst SumFavoriteViewsTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Map')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Chart')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Pivot Table')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Event Report')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Event Chart')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Dashboard')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Data Set Report')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Total')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        mapViews,\n        chartViews,\n        pivotTableViews,\n        eventReportViews,\n        eventChartViews,\n        dashboardViews,\n        dataSetReportViews,\n        totalViews\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                                <TableCell>{intervalDate}</TableCell>\n                                <TableCell>{mapViews}</TableCell>\n                                <TableCell>{chartViews}</TableCell>\n                                <TableCell>{pivotTableViews}</TableCell>\n                                <TableCell>{eventReportViews}</TableCell>\n                                <TableCell>{eventChartViews}</TableCell>\n                                <TableCell>{dashboardViews}</TableCell>\n                                <TableCell>{dataSetReportViews}</TableCell>\n                                <TableCell>{totalViews}</TableCell>\n                            </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nSumFavoriteViewsTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    chartViews: PropTypes.number.isRequired,\n    dashboardViews: PropTypes.number.isRequired,\n    dataSetReportViews: PropTypes.number.isRequired,\n    eventChartViews: PropTypes.number.isRequired,\n    eventReportViews: PropTypes.number.isRequired,\n    mapViews: PropTypes.number.isRequired,\n    pivotTableViews: PropTypes.number.isRequired,\n    totalViews: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default SumFavoriteViewsTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport { getIntervalDate } from '../../selectors/date.js';\nimport TableWrapper from './TableWrapper.js';\n\nconst AverageFavoriteViewsTable = ({\n  data,\n  interval\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Average Map')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Average Chart')}</TableCellHead>\n                    <TableCellHead>\n                        {i18n.t('Average Pivot Table')}\n                    </TableCellHead>\n                    <TableCellHead>\n                        {i18n.t('Average Event Report')}\n                    </TableCellHead>\n                    <TableCellHead>\n                        {i18n.t('Average Event Chart')}\n                    </TableCellHead>\n                    <TableCellHead>{i18n.t('Average Dashboard')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Average')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        year,\n        month,\n        week,\n        day,\n        averageMapViews,\n        averageChartViews,\n        averagePivotTableViews,\n        averageEventReportViews,\n        averageEventChartViews,\n        averageDashboardViews,\n        averageViews\n      }) => {\n        const intervalDate = getIntervalDate({\n          year,\n          month,\n          week,\n          day\n        }, interval);\n        return <TableRow key={intervalDate}>\n                                <TableCell>{intervalDate}</TableCell>\n                                <TableCell>{averageMapViews}</TableCell>\n                                <TableCell>{averageChartViews}</TableCell>\n                                <TableCell>{averagePivotTableViews}</TableCell>\n                                <TableCell>{averageEventReportViews}</TableCell>\n                                <TableCell>{averageEventChartViews}</TableCell>\n                                <TableCell>{averageDashboardViews}</TableCell>\n                                <TableCell>{averageViews}</TableCell>\n                            </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nAverageFavoriteViewsTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    averageChartViews: PropTypes.number.isRequired,\n    averageDashboardViews: PropTypes.number.isRequired,\n    averageEventChartViews: PropTypes.number.isRequired,\n    averageEventReportViews: PropTypes.number.isRequired,\n    averageMapViews: PropTypes.number.isRequired,\n    averagePivotTableViews: PropTypes.number.isRequired,\n    averageViews: PropTypes.number.isRequired,\n    day: PropTypes.number,\n    month: PropTypes.number,\n    week: PropTypes.number,\n    year: PropTypes.number\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default AverageFavoriteViewsTable;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport moment from 'moment';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport TableWrapper from './TableWrapper.js';\n\nconst TopFavoritesTable = ({\n  data\n}) => <TableWrapper>\n        <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>{i18n.t('Position')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Name')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Views')}</TableCellHead>\n                    <TableCellHead>{i18n.t('ID')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Created')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {data.map(({\n        position,\n        name,\n        views,\n        id,\n        created\n      }) => {\n        const timestamp = moment(created).format('MMM D, YYYY');\n        return <TableRow key={id}>\n                            <TableCell>{position}</TableCell>\n                            <TableCell>{name}</TableCell>\n                            <TableCell>{views}</TableCell>\n                            <TableCell>{id}</TableCell>\n                            <TableCell>{timestamp}</TableCell>\n                        </TableRow>;\n      })}\n            </TableBody>\n        </Table>\n    </TableWrapper>;\n\nTopFavoritesTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    created: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    position: PropTypes.number.isRequired,\n    views: PropTypes.number.isRequired\n  })).isRequired\n};\nexport default TopFavoritesTable;","import React, { useEffect } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { CircularLoader, ComponentCover, CenteredContent } from '@dhis2/ui';\nconst query = {\n  favorites: {\n    resource: 'dataStatistics/favorites',\n    params: ({\n      eventType,\n      pageSize,\n      sortOrder,\n      fields\n    }) => ({\n      eventType,\n      pageSize,\n      sortOrder,\n      fields\n    })\n  }\n};\n\nconst TopFavoritesQuery = ({\n  eventType,\n  pageSize,\n  sortOrder,\n  fields,\n  children\n}) => {\n  const {\n    loading,\n    error,\n    data,\n    called,\n    refetch\n  } = useDataQuery(query, {\n    lazy: true,\n    variables: {\n      eventType,\n      pageSize,\n      sortOrder,\n      fields\n    }\n  });\n  useEffect(() => {\n    refetch({\n      eventType,\n      pageSize,\n      sortOrder,\n      fields\n    });\n  }, [eventType, pageSize, sortOrder, fields]);\n\n  if (!called || loading) {\n    return <ComponentCover>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </ComponentCover>;\n  }\n\n  if (error) {\n    throw error;\n  }\n\n  return children(data.favorites);\n};\n\nTopFavoritesQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  eventType: PropTypes.string.isRequired,\n  fields: PropTypes.array.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  sortOrder: PropTypes.string.isRequired\n};\nexport default TopFavoritesQuery;","import React, { useEffect } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { CircularLoader, ComponentCover, CenteredContent } from '@dhis2/ui';\nconst query = {\n  dataStatistics: {\n    resource: 'dataStatistics',\n    params: ({\n      startDate,\n      endDate,\n      interval,\n      fields\n    }) => ({\n      startDate,\n      endDate,\n      interval,\n      fields\n    })\n  }\n};\n\nconst DataStatisticsQuery = ({\n  children,\n  endDate,\n  fields,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => {\n  const onDone = () => setIsIntervalStale(false);\n\n  const {\n    loading,\n    error,\n    data,\n    called,\n    refetch\n  } = useDataQuery(query, {\n    lazy: true,\n    variables: {\n      startDate,\n      endDate,\n      interval,\n      fields\n    },\n    onComplete: onDone,\n    onError: onDone\n  });\n  useEffect(() => {\n    refetch({\n      startDate,\n      endDate,\n      interval,\n      fields\n    });\n  }, [startDate, endDate, interval, fields]);\n\n  if (!called || loading || isIntervalStale) {\n    return <ComponentCover>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </ComponentCover>;\n  }\n\n  if (error) {\n    throw error;\n  }\n\n  return children(data.dataStatistics);\n};\n\nDataStatisticsQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  endDate: PropTypes.string.isRequired,\n  fields: PropTypes.array.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default DataStatisticsQuery;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { TopFavoritesTable } from '../Tables';\nimport { TopFavoritesQuery } from '../Queries';\nconst fields = ['position', 'name', 'views', 'id', 'created'];\n\nconst TopFavoritesVisualization = ({\n  eventType,\n  pageSize,\n  sortOrder\n}) => <TopFavoritesQuery eventType={eventType} fields={fields} pageSize={pageSize} sortOrder={sortOrder}>\n        {data => <TopFavoritesTable data={data} />}\n    </TopFavoritesQuery>;\n\nTopFavoritesVisualization.propTypes = {\n  eventType: PropTypes.string.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  sortOrder: PropTypes.string.isRequired\n};\nexport default TopFavoritesVisualization;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport styles from './ChartHeader.module.css';\n\nconst ChartHeader = ({\n  title,\n  subtitle\n}) => <header>\n        <h4 className={styles.title}>{title}</h4>\n        <h6 className={styles.subtitle}>{subtitle}</h6>\n    </header>;\n\nChartHeader.propTypes = {\n  subtitle: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n};\nexport default ChartHeader;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Card } from '@dhis2/ui';\nimport ChartHeader from './ChartHeader.js';\nimport styles from './ChartWrapper.module.css';\n/**\n * This wrapper expects a react-chartjs-2 <Line> component as child.\n */\n\nconst ChartWrapper = ({\n  children,\n  title,\n  subtitle\n}) => <div className={styles.outerContainer}>\n        <Card>\n            <div className={styles.innerContainer}>\n                <ChartHeader title={title} subtitle={subtitle} />\n                <div className={styles.chartContainer}>{children}</div>\n            </div>\n        </Card>\n    </div>;\n\nChartWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n};\nexport default ChartWrapper;","import i18n from '@dhis2/d2-i18n';\nimport CATEGORIES from '../../constants/categories';\nimport { getIntervalDate } from '../../selectors/date.js';\nexport const getTitles = selected => {\n  const selectedCategory = CATEGORIES.find(category => category.value === selected);\n  return {\n    title: selectedCategory.label,\n    subtitle: selectedCategory.subtitle\n  };\n};\nexport const getLabels = (data, interval) => data.map(({\n  year,\n  month,\n  week,\n  day\n}) => getIntervalDate({\n  year,\n  month,\n  week,\n  day\n}, interval));\nexport const getDataValuesDatasets = data => [{\n  label: i18n.t('Data Values'),\n  data: data.map(d => d.savedDataValues),\n  borderColor: '#7cb5ec'\n}];\nexport const getUsersDatasets = data => [{\n  label: i18n.t('Active Users'),\n  data: data.map(d => d.activeUsers),\n  borderColor: '#7cb5ec'\n}, {\n  label: i18n.t('Total Users'),\n  data: data.map(d => d.users),\n  borderColor: '#cc6600'\n}];\nexport const getFavoritesSavedDatasets = data => [{\n  label: i18n.t('Maps'),\n  data: data.map(d => d.savedMaps),\n  borderColor: '#7cb5ec'\n}, {\n  label: i18n.t('Charts'),\n  data: data.map(d => d.savedCharts),\n  borderColor: '#cc6600'\n}, {\n  label: i18n.t('Pivot Tables'),\n  data: data.map(d => d.savedPivotTables),\n  borderColor: '#cccc00'\n}, {\n  label: i18n.t('Event Reports'),\n  data: data.map(d => d.savedEventReports),\n  borderColor: '#66cc00'\n}, {\n  label: i18n.t('Event Charts'),\n  data: data.map(d => d.savedEventCharts),\n  borderColor: '#ff0066'\n}, {\n  label: i18n.t('Dashboards'),\n  data: data.map(d => d.savedDashboards),\n  borderColor: '#000000'\n}, {\n  label: i18n.t('Indicators'),\n  data: data.map(d => d.savedIndicators),\n  borderColor: '#00cccc'\n}];\nexport const getSumAllFavoriteViewsDatasets = data => [{\n  label: i18n.t('Map'),\n  data: data.map(d => d.mapViews),\n  borderColor: '#7cb5ec'\n}, {\n  label: i18n.t('Chart'),\n  data: data.map(d => d.chartViews),\n  borderColor: '#cc6600'\n}, {\n  label: i18n.t('Pivot Table'),\n  data: data.map(d => d.pivotTableViews),\n  borderColor: '#cccc00'\n}, {\n  label: i18n.t('Event Report'),\n  data: data.map(d => d.eventReportViews),\n  borderColor: '#66cc00'\n}, {\n  label: i18n.t('Event Chart'),\n  data: data.map(d => d.eventChartViews),\n  borderColor: '#ff0066'\n}, {\n  label: i18n.t('Dashboard'),\n  data: data.map(d => d.dashboardViews),\n  borderColor: '#000000'\n}, {\n  label: i18n.t('Data Set Report'),\n  data: data.map(d => d.dataSetReportViews),\n  borderColor: '#00cccc'\n}];\nexport const getSumTotalFavoriteViewsDatasets = data => [{\n  label: i18n.t('Total'),\n  data: data.map(d => d.totalViews),\n  borderColor: '#7cb5ec'\n}];\nexport const getAverageAllFavoriteViewsDatasets = data => [{\n  label: i18n.t('Average Map'),\n  data: data.map(d => d.averageMapViews),\n  borderColor: '#7cb5ec'\n}, {\n  label: i18n.t('Average Chart'),\n  data: data.map(d => d.averageChartViews),\n  borderColor: '#cc6600'\n}, {\n  label: i18n.t('Average Pivot Table'),\n  data: data.map(d => d.averagePivotTableViews),\n  borderColor: '#cccc00'\n}, {\n  label: i18n.t('Average Event Report'),\n  data: data.map(d => d.averageEventReportViews),\n  borderColor: '#66cc00'\n}, {\n  label: i18n.t('Average Event Chart'),\n  data: data.map(d => d.averageEventChartViews),\n  borderColor: '#ff0066'\n}, {\n  label: i18n.t('Average Dashboard'),\n  data: data.map(d => d.averageDashboardViews),\n  borderColor: '#000000'\n}];\nexport const getAverageTotalFavoriteViewsDatasets = data => [{\n  label: i18n.t('Average'),\n  data: data.map(d => d.averageViews),\n  borderColor: '#7cb5ec'\n}];","import i18n from '@dhis2/d2-i18n';\n/**\n * These are the options we apply to each Line graph.\n * For documentation on the options see:\n *\n * - https://github.com/reactchartjs/react-chartjs-2\n * - https://www.chartjs.org/docs/latest/\n */\n\nconst options = {\n  animation: {\n    duration: 180\n  },\n  legend: {\n    position: 'bottom'\n  },\n  maintainAspectRatio: false,\n  elements: {\n    line: {\n      tension: 0,\n      fill: false,\n      backgroundColor: 'rgba(0, 0, 0, 0)'\n    }\n  },\n  scales: {\n    yAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: i18n.t('Values')\n      }\n    }]\n  }\n};\nexport default options;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getUsersDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst UsersChart = ({\n  data,\n  category,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(category);\n  const labels = getLabels(data, interval);\n  const datasets = getUsersDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nUsersChart.propTypes = {\n  category: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    activeUsers: PropTypes.number.isRequired,\n    users: PropTypes.number.isRequired\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default UsersChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getDataValuesDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst DataValuesChart = ({\n  data,\n  category,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(category);\n  const labels = getLabels(data, interval);\n  const datasets = getDataValuesDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nDataValuesChart.propTypes = {\n  category: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    savedDataValues: PropTypes.number.isRequired\n  }))\n};\nexport default DataValuesChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getFavoritesSavedDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst FavoritesSavedChart = ({\n  data,\n  category,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(category);\n  const labels = getLabels(data, interval);\n  const datasets = getFavoritesSavedDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nFavoritesSavedChart.propTypes = {\n  category: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    savedCharts: PropTypes.number.isRequired,\n    savedDashboards: PropTypes.number.isRequired,\n    savedEventCharts: PropTypes.number.isRequired,\n    savedEventReports: PropTypes.number.isRequired,\n    savedIndicators: PropTypes.number.isRequired,\n    savedMaps: PropTypes.number.isRequired,\n    savedPivotTables: PropTypes.number.isRequired\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default FavoritesSavedChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getSumAllFavoriteViewsDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst SumAllFavoriteViewsChart = ({\n  data,\n  category,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(category);\n  const labels = getLabels(data, interval);\n  const datasets = getSumAllFavoriteViewsDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nSumAllFavoriteViewsChart.propTypes = {\n  category: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    chartViews: PropTypes.number.isRequired,\n    dashboardViews: PropTypes.number.isRequired,\n    dataSetReportViews: PropTypes.number.isRequired,\n    eventChartViews: PropTypes.number.isRequired,\n    eventReportViews: PropTypes.number.isRequired,\n    mapViews: PropTypes.number.isRequired,\n    pivotTableViews: PropTypes.number.isRequired\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default SumAllFavoriteViewsChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getSumTotalFavoriteViewsDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst SumTotalFavoriteViewsChart = ({\n  data,\n  category,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(category);\n  const labels = getLabels(data, interval);\n  const datasets = getSumTotalFavoriteViewsDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nSumTotalFavoriteViewsChart.propTypes = {\n  category: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    totalViews: PropTypes.number.isRequired\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default SumTotalFavoriteViewsChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getAverageAllFavoriteViewsDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst AverageAllFavoriteViewsChart = ({\n  data,\n  category,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(category);\n  const labels = getLabels(data, interval);\n  const datasets = getAverageAllFavoriteViewsDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nAverageAllFavoriteViewsChart.propTypes = {\n  category: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    averageChartViews: PropTypes.number.isRequired,\n    averageDashboardViews: PropTypes.number.isRequired,\n    averageEventChartViews: PropTypes.number.isRequired,\n    averageEventReportViews: PropTypes.number.isRequired,\n    averageMapViews: PropTypes.number.isRequired,\n    averagePivotTableViews: PropTypes.number.isRequired\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default AverageAllFavoriteViewsChart;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { Line } from 'react-chartjs-2';\nimport ChartWrapper from './ChartWrapper.js';\nimport { getTitles, getLabels, getAverageTotalFavoriteViewsDatasets } from './selectors.js';\nimport options from './options.js';\n\nconst AverageTotalFavoriteViewsChart = ({\n  data,\n  category,\n  interval\n}) => {\n  const {\n    title,\n    subtitle\n  } = getTitles(category);\n  const labels = getLabels(data, interval);\n  const datasets = getAverageTotalFavoriteViewsDatasets(data);\n  return <ChartWrapper title={title} subtitle={subtitle}>\n            <Line data={{\n      labels,\n      datasets\n    }} options={options} />\n        </ChartWrapper>;\n};\n\nAverageTotalFavoriteViewsChart.propTypes = {\n  category: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    averageViews: PropTypes.number.isRequired\n  })).isRequired,\n  interval: PropTypes.string.isRequired\n};\nexport default AverageTotalFavoriteViewsChart;","import React, { Fragment } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { DataValuesTable } from '../Tables';\nimport { DataValuesChart } from '../Charts';\nimport { DataStatisticsQuery } from '../Queries';\nconst fields = ['year', 'month', 'week', 'day', 'savedDataValues'];\n\nconst DataValuesVisualization = ({\n  category,\n  endDate,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => <DataStatisticsQuery endDate={endDate} fields={fields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n        {data => <Fragment>\n                <DataValuesChart category={category} data={data} interval={interval} />\n                <DataValuesTable data={data} interval={interval} />\n            </Fragment>}\n    </DataStatisticsQuery>;\n\nDataValuesVisualization.propTypes = {\n  category: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default DataValuesVisualization;","import React, { Fragment } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { UsersTable } from '../Tables';\nimport { UsersChart } from '../Charts';\nimport { DataStatisticsQuery } from '../Queries';\nconst fields = ['year', 'month', 'week', 'day', 'activeUsers', 'users'];\n\nconst UsersVisualization = ({\n  category,\n  endDate,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => <DataStatisticsQuery endDate={endDate} fields={fields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n        {data => <Fragment>\n                <UsersChart category={category} data={data} interval={interval} />\n                <UsersTable data={data} interval={interval} />\n            </Fragment>}\n    </DataStatisticsQuery>;\n\nUsersVisualization.propTypes = {\n  category: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default UsersVisualization;","import React, { Fragment } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { FavoritesSavedTable } from '../Tables';\nimport { FavoritesSavedChart } from '../Charts';\nimport { DataStatisticsQuery } from '../Queries';\nconst fields = ['year', 'month', 'week', 'day', 'savedMaps', 'savedCharts', 'savedPivotTables', 'savedEventReports', 'savedEventCharts', 'savedDashboards', 'savedIndicators'];\n\nconst FavoritesSavedVisualization = ({\n  category,\n  endDate,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => <DataStatisticsQuery endDate={endDate} fields={fields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n        {data => <Fragment>\n                <FavoritesSavedChart category={category} data={data} interval={interval} />\n                <FavoritesSavedTable data={data} interval={interval} />\n            </Fragment>}\n    </DataStatisticsQuery>;\n\nFavoritesSavedVisualization.propTypes = {\n  category: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default FavoritesSavedVisualization;","import React, { Fragment } from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { SUM } from '../../constants/aggregations.js';\nimport { ALL } from '../../constants/chartTypes.js';\nimport { SumAllFavoriteViewsChart, SumTotalFavoriteViewsChart, AverageAllFavoriteViewsChart, AverageTotalFavoriteViewsChart } from '../Charts';\nimport { SumFavoriteViewsTable, AverageFavoriteViewsTable } from '../Tables';\nimport { DataStatisticsQuery } from '../Queries';\nconst fields = ['year', 'month', 'week', 'day'];\nconst sumFields = [...fields, 'mapViews', 'chartViews', 'pivotTableViews', 'eventReportViews', 'eventChartViews', 'dashboardViews', 'dataSetReportViews', 'totalViews'];\nconst averageFields = [...fields, 'averageMapViews', 'averageChartViews', 'averagePivotTableViews', 'averageEventReportViews', 'averageEventChartViews', 'averageDashboardViews', 'averageViews'];\n\nconst FavoriteViewsVisualization = ({\n  aggregation,\n  category,\n  chartType,\n  endDate,\n  interval,\n  isIntervalStale,\n  setIsIntervalStale,\n  startDate\n}) => {\n  const isSum = aggregation === SUM;\n  const isAll = chartType === ALL;\n\n  if (isSum) {\n    return <DataStatisticsQuery endDate={endDate} fields={sumFields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n                {data => <Fragment>\n                        {isAll ? <SumAllFavoriteViewsChart category={category} data={data} interval={interval} /> : <SumTotalFavoriteViewsChart data={data} category={category} interval={interval} />}\n                        <SumFavoriteViewsTable data={data} interval={interval} />\n                    </Fragment>}\n            </DataStatisticsQuery>;\n  }\n\n  return <DataStatisticsQuery endDate={endDate} fields={averageFields} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate}>\n            {data => <Fragment>\n                    {isAll ? <AverageAllFavoriteViewsChart category={category} data={data} interval={interval} /> : <AverageTotalFavoriteViewsChart category={category} data={data} interval={interval} />}\n                    <AverageFavoriteViewsTable data={data} interval={interval} />\n                </Fragment>}\n        </DataStatisticsQuery>;\n};\n\nFavoriteViewsVisualization.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  chartType: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default FavoriteViewsVisualization;","import React from 'react';\nimport PropTypes from '@dhis2/prop-types';\nimport { CircularLoader, ComponentCover, CenteredContent } from '@dhis2/ui';\nimport { TOP_FAVORITES, DATA_VALUES, USERS, FAVORITES_SAVED, FAVORITE_VIEWS } from '../../constants/categories.js';\nimport TopFavoritesVisualization from './TopFavoritesVisualization.js';\nimport DataValuesVisualization from './DataValuesVisualization.js';\nimport UsersVisualization from './UsersVisualization.js';\nimport FavoritesSavedVisualization from './FavoritesSavedVisualization.js';\nimport FavoriteViewsVisualization from './FavoriteViewsVisualization.js';\n\nconst Visualization = ({\n  aggregation,\n  category,\n  chartType,\n  endDate,\n  eventType,\n  interval,\n  isIntervalStale,\n  isDateValid,\n  pageSize,\n  setIsIntervalStale,\n  sortOrder,\n  startDate\n}) => {\n  /**\n   * Render a loading spinner if the current date range is invalid, to not\n   * trigger any invalid fetches\n   */\n  if (!isDateValid) {\n    return <ComponentCover>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </ComponentCover>;\n  }\n\n  switch (category) {\n    case TOP_FAVORITES:\n      return <TopFavoritesVisualization eventType={eventType} pageSize={pageSize} sortOrder={sortOrder} />;\n\n    case DATA_VALUES:\n      return <DataValuesVisualization category={category} endDate={endDate} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate} />;\n\n    case USERS:\n      return <UsersVisualization category={category} endDate={endDate} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate} />;\n\n    case FAVORITES_SAVED:\n      return <FavoritesSavedVisualization category={category} endDate={endDate} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate} />;\n\n    case FAVORITE_VIEWS:\n      return <FavoriteViewsVisualization aggregation={aggregation} category={category} chartType={chartType} endDate={endDate} interval={interval} isIntervalStale={isIntervalStale} setIsIntervalStale={setIsIntervalStale} startDate={startDate} />;\n\n    default:\n      throw new Error('Unrecognized category');\n  }\n};\n\nVisualization.propTypes = {\n  aggregation: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  chartType: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  eventType: PropTypes.string.isRequired,\n  interval: PropTypes.string.isRequired,\n  isDateValid: PropTypes.bool.isRequired,\n  isIntervalStale: PropTypes.bool.isRequired,\n  pageSize: PropTypes.string.isRequired,\n  setIsIntervalStale: PropTypes.func.isRequired,\n  sortOrder: PropTypes.string.isRequired,\n  startDate: PropTypes.string.isRequired\n};\nexport default Visualization;","import moment from 'moment';\n/**\n * This creates the default start and end dates for the app state. The format\n * is YYYY-MM-DD because that's what a date input expects, and that's what these\n * dates will be used for.\n * The default is to have the end date be now, and the start date 4 months before\n * that.\n */\n\nconst createDefaultDates = () => {\n  const format = 'YYYY-MM-DD';\n  const initialStartDate = moment().subtract(4, 'months').format(format);\n  const initialEndDate = moment().format(format);\n  return {\n    initialStartDate,\n    initialEndDate\n  };\n};\n\nexport default createDefaultDates;","import React, { useState } from 'react';\nimport { FAVORITE_VIEWS } from '../../constants/categories.js';\nimport { WEEK } from '../../constants/intervals.js';\nimport { SUM } from '../../constants/aggregations.js';\nimport { ALL } from '../../constants/chartTypes.js';\nimport { CHART_VIEW } from '../../constants/eventTypes.js';\nimport { PS_25 } from '../../constants/pageSizes.js';\nimport { ASC } from '../../constants/sortOrders.js';\nimport FilterFields from '../FilterFields';\nimport { LayoutContainer, LayoutSidebar, LayoutContent } from '../Layout';\nimport CategoryField from '../CategoryField';\nimport AppTitle from '../AppTitle';\nimport Visualization from '../Visualization';\nimport './App.css';\nimport createDefaultDates from './createDefaultDates.js';\n\nconst App = () => {\n  const {\n    initialStartDate,\n    initialEndDate\n  } = createDefaultDates(); // State\n\n  const [aggregation, setAggregation] = useState(SUM);\n  const [category, setCategory] = useState(FAVORITE_VIEWS);\n  const [chartType, setChartType] = useState(ALL);\n  const [endDate, setEndDate] = useState(initialEndDate);\n  const [eventType, setEventType] = useState(CHART_VIEW);\n  const [interval, setInterval] = useState(WEEK);\n  const [pageSize, setPageSize] = useState(PS_25);\n  const [sortOrder, setSortOrder] = useState(ASC);\n  const [startDate, setStartDate] = useState(initialStartDate);\n  /**\n   * The rendering of the different date intervals in the charts and tables\n   * will crash if the props and the data aren't in sync. To prevent stale\n   * props from being used we're tracking the stale status of interval.\n   */\n\n  const [isIntervalStale, setIsIntervalStale] = useState(false);\n\n  const setIsStaleAndInterval = interval => {\n    setIsIntervalStale(true);\n    setInterval(interval);\n  };\n  /**\n   * Used to block fetching if date validation has failed, as the fetch\n   * will throw an error for invalid dates.\n   */\n\n\n  const [isDateValid, setIsDateValid] = useState(true);\n  return <LayoutContainer>\n            <LayoutSidebar>\n                <AppTitle />\n                <CategoryField category={category} setCategory={setCategory} />\n                <FilterFields aggregation={aggregation} category={category} chartType={chartType} endDate={endDate} eventType={eventType} interval={interval} pageSize={pageSize} setAggregation={setAggregation} setChartType={setChartType} setEndDate={setEndDate} setEventType={setEventType} setInterval={setIsStaleAndInterval} setIsDateValid={setIsDateValid} setPageSize={setPageSize} setSortOrder={setSortOrder} setStartDate={setStartDate} sortOrder={sortOrder} startDate={startDate} />\n            </LayoutSidebar>\n            <LayoutContent>\n                <Visualization aggregation={aggregation} category={category} chartType={chartType} endDate={endDate} eventType={eventType} interval={interval} isIntervalStale={isIntervalStale} isDateValid={isDateValid} pageSize={pageSize} setIsIntervalStale={setIsIntervalStale} sortOrder={sortOrder} startDate={startDate} />\n            </LayoutContent>\n        </LayoutContainer>;\n};\n\nexport default App;","export { default } from './App';"],"sourceRoot":""}